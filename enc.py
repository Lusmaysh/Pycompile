import base64
exec(base64.b64decode('import base64
exec(base64.b64decode('aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0oyRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMG95UmxoTldHUnBUVEJ2ZDFOVlpFdGhSMDE1VmxSS1QxRllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTUc5NVVteG9UbGRIVW5CVVZFSjJaREZPVmxwRmRHaFNNREUxVm14U1MxUXhSbGxSYms1aFZsZFNXRmxYZERCVFJrNTBZVWR3VG1KR1ZqVldSM1JPVFZkR1ZrNVlSbFppV0ZKb1ZtcEJNVTFzWkhKYVJscHBUVWM1TlZWdGVHOVViR1JJVlc1Q1ZWWkZTakphUkVaUFZteHdSbVJIYUZOTlJFVXhWbTE0VTFNeFVYaFNiR3hTWW1zMWFGWnNaRk5YUm14WVpFUkNWRkpyTlRCWlZXUjNWRzFLUjFacVZsZFNNMUpQVkZaa1IxWnJOVmxTYkZwcFYwWktiMVp0Y0VKTlZURnpXa2hLWVZKc2NIQlVWV00xVGxaV2RHVkhPVlZpUjFKSlZsYzFRMVpXV2taVGFrcGhVa1ZhVUZadGVIZFNiVkpJWVVaT1RsSkZWWGhXYlRFMFZURk5lRlZZYUZOaVIzaFRXVzF6TVdGR1duTmFSazVZVW0xNFdWcEZVa05XUmtweVRsUkNXbFpYVWpOV1J6RkxVakZhY1Zac1pGTk5NVXBRVmtaYWExSXhXbkpPVm14VFlrWndjRll3V2t0aU1WcDBZMFZLVGxaVVJucFhhMmhMV1ZaS2MyTklRbFZXVjAweFZHeGFWMlJIVmtoUFZsWnBVakZLU2xac1l6RlJNVnBYVjJ0YVZHRnJjR2hWYTFaaFZVWmFkR1ZJWkZOaVZrcEpXVlZhVDFSc1NrWldXR2hYWWxSRk1GWlVSazVsUmxaWllVWk9hVkl6YUZSWFZ6RjZUVmRHUjFkdVRtRlNhelZaVlcweE5GZFdjRVpWYTA1WFVtdHdlVlJzVWtOWGJGcFlWV3BPVjFKNlJreFZha1poWTFaYWMxcEdUazVOVlhCUlZtdGFZV0V4U1hoWGJrcFBWbTE0VkZsclduZGpSbGwzVjJ0MGFVMVdjREJaTUZaTFZHeGFWVkp1Y0ZoaE1taE1WMVphUzJNeVRrbFJiRlpYVmpBd2VGWkhlR0ZXTWxKSVZtdG9VRlpzV25CVmFrWkxVMnhhYzFsNlJsSk5WbkJZVmpKMFlWWkhSbkpqUjJoV1lURmFhRlpWV21Ga1IxWkpXa1pPYVZacmNFcFhWbFpoVkRGU2MxTnJXbGRYUjJoWVdXeFNSazFHV2xWU2F6VnNVbXhhV2xsVldrOWhWa2w2WVVaU1dGWjZSalpVVm1SSFVqRmtkVlJ0UmxOaGVsWmFWbGN3ZUU1R1pGZGpSVnBXWVRBMVdGVnRkSGRsVmxKelZXdE9XR0pHY0ZsV1YzQlBWakZLTmxKcmVGWmhhMXBvV1RGYVlXTXhjRWRVYXpWT1ZsaENVbFp0ZEdGWlYwVjRVMWhvV0dKcmNGQldiVEUwVmtac2NsZHVaR3BTYkd3elZqSjBNR0ZWTVZkalJFSmFUVVphVEZaSGVHRldWa3AxWTBab2FFMXRhRTFXTVZwaFV6Sk5lVlJyYkZKaVJscFlWbXBCZDJWR1draGxSMFpYVFd4S1NWWnRkRzlWUmxwelYyNUNWbUZyV2t4Vk1uaGhZekZzTmxKc1NrNVdia0paVm1wS01GbFdXa2hTYmtwcVVqSm9WMWxVUm1GaFJscFdWMjFHYTFJeFdrcFhhMXBQWVZaYWNtTkZjRmhXYkZwb1ZrUkdVMk14VG5KWGJHUllVakpvV1ZkWGVGTlNhekZIVjJ4V1UyRjZWbk5WYlhoaFYyeHNWbGRyT1ZoU2F6VkhWVEl3TlZkSFNraFZXR1JoVWtWYWVsWnFTa3RTTVZwelZXMXNVMVpHV2paV01XUXdZVEExUjFwRlpGaGliRXB4Vlcxek1WZEdWblJrU0dSWFlrWmFNRnBWYUU5WFIwcEhZMFpzVjFZelFsQldNbmhoWkVaV2NtRkdWbWxYUjJodlYxUkdZVlF5VFhoalJWcFBWbTFTY0ZsVVFuWk5WbHAwWkVkR1ZrMVZNVFJXVnpWVFZqSktTRlZzWkZwaE1sRXdXVEZhVjJOV1RuRlZiR1JYWWtaWmVsWnRNVEJOUmxwV1RWWmthbEp0ZUZaWmEyUnZZMnhzV0dNemFGTldiSEF4V1RCYVlXRldTWGxoUkZwWFlUSlJNRlY2UmtwbFJuQkpWbXhXYVZORlNsbFdWM2hUVmpBeGMxZHJaRmhpVlZwaFZtMXpNVk5XV2toa1IzUmFWbXRzTlZsVll6VlpWbGw2Vld0MFZWWldjR2hXYkZwUFZsWktjMVpyTlZkTlZXd3pWbXhTUzAxR2JGZFZXR2hoVWxkU1dWbHNWbUZYUm14ellVYzVUazFZUWxoV01qVnJWakF4V1ZGcmFGaGhNWEJVVm1wQmVGSldXbkpoUm1oWFVsVndlVmRYY0VkWGJWWkhXa2hPYVZKcmNGbFZNRlpMVjFaa1YxcEVRbXBOUkZaSVdXdFNZVlV5UlhoalNFNVhZbGhvYUZSV1dtRlhSMVpIV2tkb1UwMUlRa2xYVkVKaFVqRlplVkp1U2xSaVYyaFpWbTE0ZDJWc1duRlNiWFJyVm14d01Ga3dXazlXTURGV1kwUlNWMkV4Y0doWFZscHpWakZTY2xwR2FHbFNNVXAyVmxkd1QxVXlTWGhXYmxKc1UwVTFUMVJXWkRCTk1WcFlaRWQwVjAxRVJsaFpNRkpEVmpGYU5sWnFUbGRpV0U0MFdrWmtSMUp0VWtoU2JHUlhZbXRLTlZZeWRHRmhNVkY0VTFoc1ZXRXlhSE5WYWtwdlZERlNWbFp1WkZoaVJuQXdXVEJXTUdFd01WWldhbFpYVW0xb2VsWnRNVVpsVmxaeldrWndhVmRIYUc5V2JURTBZekpOZUZkdVVsTmlSMmhVV1d0V2QxZEdXbkZUVkVaYVZteEtlbFl5TlU5V01rWnpVMnhzV2xaRmNIWldWVnB6VjBVeFZtUkdUbWhsYTFwWFZtMHhOR0V4VlhkTlNHaFVZV3h3V0Zsc2FGTmpiRlkyVTJzNWFrMVdTakZXYlhoTFlWWk9SbE51WkZkaGEwcHlXV3BHVDFZeGNFbFRiVVpUVW10d1YxWkdXbXRWTVU1WFZsaHNhMUl3V205WmExWnpUbFpzVmxkdE9WZE5hM0JJVlRKNGIxWlhTbGxoUjJoV1lrWndURnBGWkZOU01rNUhXa2RzVjJFelFscFdiWFJoV1Zac1YxZFliRk5pUjFKVldWZDRkMVpHYkhKYVJGSlhUVmQ0VmxWdE1VZFdNREZYVTJ4a1YwMXFSWGRaVjNoaFkyMU9SVkZzVm1sU01VVjNWbXhTUjFsV1RraFdhMlJxVW0xU2IxbFVTVFZOTVdSeVZXdGtWMkpXV2xoVk1qVlhWbTFLV1dGR1ZsWmlXRkl6VmpGYVlWSXhXblJrUjJ4T1lrWndObFp0TVRSV01WVjVVMjVTVm1KcldsWldiVEZPVFZaU2RHVklUbGRpUjFKNVZrZDRhMVJzU2taWGJVWlhWbTFPTkZWcVJscGxSazUxVkcxd1UySkZjR2hYYkdRd1pERlNSMWR1UmxOaVJUVnhWRlprVTJWc2JGWlhiWFJXVFd0d1NsVlhOV0ZXTURGWVZWaGtXbFpGY0VkYVJFRXhWbXh3UjFkc2FGTk5iV2gyVm14a2QxRXhiRmRhUm1SWVltdGFWRmxzVm1GWFJsSlhWMjFHVGxKc1NsZFdWM1JyVjBaS2NtTkliRnBOUmxweVZtcEtTMUl4VG5KaFJtUk9VakZLVFZacVJtdFNNVTVYVjI1U1UySkhVbGhaYTFwWFRrWmFkR05GVGxwV01GWTFWa1pvYzFaSFJYbGhTRXBXWWtaS1dGWkVSbGRqTVdSeldrVTFUbFp1UWpaV2JHUXdZVEZaZDAxV1pGTmhiRXBYV1d4U1YxVkdiRmRXV0dSc1ZqQmFTVlF4V21GaFJURlpVVzA1VjJKR1NraFhWbVJQVmpGU2RWUnNWbWxTYTNCUVZtMHhORmR0Vm5OYVJtUlhZbGhTVDFWcVFtRlhWbFY1WkVkR1ZVMVdjREJXVjNodlZtMUdjazVXVWxkV1ZuQmhXa1JHZDFKc1pIUmxSbVJPVm01Q1NWWnRNSGhPUm14WFYxaHNWR0pIVWxWWmJURTBWMVphY1ZSdE9XaFNiRm93VkZaYVMySkdTbkpPVkVaWFZqTk5NVlpxU2t0U2JVNUhZa1prYVZaRlNUQlhiR040VlcxV1IxcEdiR2xTTTBKVVZteFNWMlZHV2tkWGJHUnJUVlUxU0ZadE5WTlVNVnBZVlcwNVZtSllVak5XTW5oWFYwZFdSazlXWkZkaVNFSlpWbXBKZUdJeGJGZFRiazVxVWpCYWFGVnJWbmRUUmxWNFYyeE9hazFWTlRCWmExcFBZa2RLV1ZScVRsZGhhMXBvVm1wR1dtVldVbGxpUms1WVVqRktVRlpxUW1GVE1WbDRZa1pXVldKRk5WaFVWbHAzWlZaYWRHUkVRbGRXYTNBd1dsVm9kMVl3TVhWVVZFWlhZV3R3VEZWcVJrOWtWMHBIVjJzMWFHRXhjRXBXYlhScVpVWk5lRlJzWkZOaWEzQlhXV3RrYjFkR1ZuTldibVJYVm0xU1dWa3dWbXRXYXpGWVZXdG9WazFxVmxCV01HUkxVbXMxV1ZGc1pHaE5XRUp2Vm0xd1IxbFhVa1pOVm14cVVsUldXRmxVUmxwTlJsbDVaRWM1VTAxV1dqQlZNalZMVkRGYWMxZHNhRnBXTTFKb1ZUQmFVMk14WkhSa1IzQnBVbTVCZUZZeWRHRlpWMFpJVm01S1dHRXlhRmhaVjNSaFZrWldWVkp0Um1waGVrWllWMnRhYjJGV1NsWmpSbWhYWWxoQ1VGbHFRWGhqTWs1SFdrWm9hVmRHU25oWFYzUmhXVmRXVjFWWWFGaGhlbXhXV1d4V2QxSXhhM2RXV0doWFRXdHdTVlpXYUd0V01rWnlWMjV3VjAxR2NGQlpla1ozVTBaS2MxUnNaR2xUUlVwWFZtMHdlRTFHYkZkaVJtUlhZa2RTV0ZsdGN6RmlNVloxWTBoT2FtSkdTbGhXTWpGSFYwWktkRlZ1YkZoaE1VcEVXVlZhWVdNeVRrbGlSbVJwVjBWS1VWWnRNSGhUTVZwWFVteHNhRkp0VW05VVZtaERZakZhY1ZGdFJtdGlWbG93VmtkMGIxVXlTa1pPV0VKV1lsUldRMVJYZUdGak1YQkZVV3h3VjJFeWR6QldNblJoWWpGVmVWSlliRlppYTBwWFdXdGFTMWRHV1hkWGJHUnFWbXhLTUZReFZURlZNa3BJWkhwR1YxSnNjRlJWVkVaaFZtc3hWMWRzYUdsaWEwcG9WMVprZWsxWFVuTmFSbVJZWVROU1ZGUldaRk5OVmxaMFpVZEdhRkl3VmpSWk1GVjRWakZrU1ZGcmFGZGhhM0JVVlRCYVUyTldaSE5UYld4WVVqSm9WbFl4WkRSaU1WWjBWbTVPWVZKdFVsaFphMlJUVm14U1dHUkdaRTlXYkZZMVdsVmtSMVpWTVZkalJXUlhUVzVvZGxacVNrdFdWa3B6Vld4d1RtSnRhRzlYYTFaclZqRktjazlXWkZaaVJUVlBWbXhhY21WV1duRlRha0phVmpGR05GWXhhRzlYUm1SSVZXczVWazFIVW5aV01WcHpWbFpLZFZwR1pFNVhSVXBZVmpKMFZrNVdWWGROVmxwcVVrVmFWMVJYTlc5V1JteFhWMnh3YkdKVldrcFhhMXByWVZaYVJsWnFUbGROVm5CeVZsUkdXbVZHY0VsV2JGWnBVakZLZDFadGRHdE9SMVpIVjJ0a1YySkZOVlJVVmxVeFYwWmFkRTVXVG1oTlZXOHlXV3RhYTFadFNsVlNiRkpXVFVad1lWcFdaRTlPYkZwelkwWmthRTB3U2tsV2EyUTBWakZSZUZkc2FGTlhSMmh4VlcxNFMxWXhVbFphUms1VlVteGFNRnBWVlRWaE1VcHlZMGhzVldKR2NISldSekZMVW14YWNWUnNaR2xYUmtwVlZsZHdTMUp0VmtoVGEyUmhVakJhVkZscmFFTlZSbHBWVVcwNVVrMXJiRFJXYlRWSFZsZEZkMDVXYkZkaVdHaFlWRlJHYTJOc1ZuTlViRnBvWld0YVdsWnNZekZpTVZwelYycGFWMkpGU2xoV2ExWkhUa1pXYzFwRmRGTmlWVFZJVjJ0Vk1XRkhSWGRoTTJSWFlsaG9jVnBWV2xwbFZsSlpZVVpXYVdKR2NGbFhWM1JoWkRGUmVGZHVVbXhUUjFKdlZXMTRkMU5XY0ZaYVJXUm9UVVJHZVZSc1VrTldNVmw2Vlc1S1dGWnNjRXhaTW5oUFl6SkdSMWR0YUdoTk1FbDVWbTEwVTFJeVJYaFhXR2hoVTBVMWFGVnRjekZVTVd4VlZHdE9UMkpIVWxaVlZ6QTFWa1V4VjJOR2JGWmlSMmh5V1ZkNFNtVlhSa2RYYkdScFVqRktWRlpHVm1GV2JWWllWbXRzWVZKck5WaFphMVozVG14WmVXUkhSbFpOYTFwWVZUSjRhMWRHWkVsUmJHaFhZVEZhYUZacldtRldWa3AwWkVaT1RsWlVWalZXYWtvMFlURlplRk5zWkdwU2JrSlpWbXBPYjJSc1dsVlRiR1JxVFZad01WVXllRzloUlRGelUyeHdWMVo2UVhoVlZFWlBVakpLUjFkdFJsTlNhM0JhVmxjeE1HUXhXWGhoTTJSb1UwVTFXRlJXV25kU01WbDVaVWM1V0ZKc2NIcFpNRlpyV1ZaS1JsSllhRmRoYTNCSVZXcEdhMlJIUmtaT1YyeFhUVzFrTlZadE1UUlZNVVY0WWtab1ZsZEhlRlpaVkVwVFkwWldkRTFXVGxoU2JYaFdWa2Q0VDFZeFNuTlRiR2hZWVRGS1ZGWkhlRXRqTVU1ellVWmthVkpyY0ZsWFZsWldaVWRPZEZScldtcFNiSEJZVkZSR1MwNXNXblJqUlhSVVRWVTFTRlp0TlZkV1IwcElWV3hvWVZZelVtaFdSbHByWTJ4YWRHUkdXazVXVkZaSVZrZDRZV0V4YkZkVGJrcFBWbTFvVmxadWNFZGtiRmw1WlVad2JGWXhXa2xaTUdRMFZUSkdObEpVUWxkTmJsSllXVlJHWVZOR1RuVlRiR2hwVWpKb2FGZFhkR3RpTVVwSFYydFdVMkpyTlhGVVZtaERVMFphU0dWR1pGZE5hM0JZVlRGb2ExZEhSWGhYYldoWFVrVndSMXBXV2s5amJVWkhVV3hrVTFaR1dtOVdNVnBUVWpGc1dGWnVUbWxTYkZwVFZqQmtiMk5zVm5SbFIwWnNWbTVDUjFZeU1VZFdNREZXWTBaa1drMUdXbnBXTUZwaFRteEtWVkZzWkZOU1ZuQnZWMnRXWVZNeVRuTlhiazVYWWxkb2MxbHNhRzlOYkZweVYyMXdUbFl3YkRSVk1qVlBWMGRLU0ZWdGFGWk5SMUpVV1RCYVUxWXhXbFZTYlhocFVtNUNTbGRyVm05VU1XUklVMnhrV0dKdGVHRlVWVnAzVjBaYWNWTnJkRk5OVm5CYVdWVmFZVll4U2xkaU0zQlhZbFJGTUZkV1pGTldNVloxVkd4V2FWSlVWblpXUmxwdlVURnNWMWR1UmxSaGEwcHZXV3hhWVZOR1duTmhSemxYVWpCYWVsa3dhRU5XYXpGSFkwZG9WMkZyV2xSV2FrWnJaRVpLZEdSSGJGTmhNMEpZVm14amQwMVdiRmhTV0dST1YwVndjVlZzWkZOWFJscHhWRzA1VlZKdGVGZFhhMVl3VjBaSmQxZHJhRlpOYm1oMlZtcEtTMU5XUm5OaVJtUlhUVEJLVFZaWWNFdFViVlpIVjI1V1ZXSlZXbFJaYTFwM1pHeGFSMVp0T1ZKTmEydzBWakowYTFZeVNsbFZiRUpXWWxoTmVGcFhlSEprTVZweldrWmtVMDFJUW1GV2JHUTBWakZrZEZKWWFGaGhhelZXVm0xNGQyRkdWWGRXVkVaWVVsUnNXRmxWV2s5aFJUQjNVMVJHVjJFeVVUQldha1pXWlVaa2RWVnNVbWxTYkhCVlYxWlNUMkl5UmtkV2JrNVlZbTFTV0ZWdE5VTlRSbGw1VFZSQ2FFMVZjSGxaTUdoM1ZqRkplbFJZYUZkaGEzQk1WVEZhUjFkWFJrZGFSMnhZVWpKb2RsWnFSbUZoTVU1MFZtdG9WR0V5VW05VmJYTXhZakZTV0UxWE9WZFdiVkpaV2tWa01HRlZNWEpOVkZKWFlsUldTRlpyWkV0V1YwcElVbXhrYVZaRlZYZFhiR1EwWXpGYWMySkVXbGRpVjJodldsZDBZVmRXV2xoTldHUlhUVmRTTUZWc2FHOVhSMHBHVTIxR1YySkdjRE5aVlZwM1VteHdSMXBHVGs1aGVsWkpWakowWVZReVNraFNXR2hYWVdzMVdGbHNhRk5XUmxZMlVtdHdiRlpzU2xwWlZWcFRZVmRLUjJOSWFGZFdNMEpFVjFaYWExSXlUa2RoUjNSVFlraENlVlpHV210Vk1WcHpWbXhvVGxaWFVtOVpXSEJIWlZaU2MxWnVUbGROYTNCYVZsYzFkMVl5U2xWU2EzaFdUVlp3U0ZsNlNrdFNNV1IwWWtaT1RtSlhhRVpXYlhSaFlUQTFTRkpZYUZoWFIyaFpXVzE0UzJOc1ZuUmpla1pWVFZkNFdsa3dWbUZpUjBwSFkwaHNXRmRJUWtoV2FrRjRZMnhhY1Zac1pHbFdSbHBSVjFaa05GTXlUbk5hU0ZKVFlrZFNjRll3Wkc5VVZscDBZMFZrVmsxck5YcFhhMmhMVlVaYWRGVnVRbFppV0ZJelZHeGFZVlpXVGxsaFJrNU9WbXR3TmxaVVJtOWtNa1pIVTJ4a2FsSnRhRmhaYkZKSFZrWlNWVkp1VG1wV2EzQjZWMnRhVTFVeVJYcFJXR2hYWWtkUk1GVlVSbHBsUms1eldrZHdVMlZ0ZUZwV2JURTBVekZGZUZWc1pGaGhNMUpVVkZaYVlWZHNaSEpYYlhSWFRWVndlbGt3YUc5V01rcFpVV3RTV21WclJYaFpla1pyWkZaV2RHTkZOVTVpVjJneVZteGplRTVIVVhoWFdHaFlWMGRvYjFWdWNITlhSbXhaWTBWa1dGSnNiRFZVYkdSSFZqRmFjMk5GWkZaaVIyaDJWakp6ZUdSV1VsVlNiR1JPVm01Q1NWZFVTbnBPVmxsNFkwVmtWV0Y2Vm5CV2FrcHZWREZhZEUxVVVscFdiRlkwVld4b2IxWkdaRWhsUmxaYVlsaE5lRmt4V2xaa01WcDFXa1prVGxZelozZFhiRlp2WVRGYWMxTnVVbXhTYkhCWVZXNXdRazFXYkZWUldHaFhUVlUxTVZscldtOWhSVEZ6VW1wT1YySllhR2hXTWpGU1pVWndTVlJ0UmxOaVNFSlFWbTB4TUdReFdsZFhiazVoVTBoQ2MxVnFRVEZYUmxWNVRsVjBWMVl3Y0ZkV01uaFRWakpLV1dGSWJHRlNSVnBvV2tWa1UxSXhaSFJsUms1b1pXeGFTVlpyWkRSWlZteFlVbTVPVkdKcmNIRlZiRkp6VmpGc2NsZHVaRTVOVmtwWVZqSXhSMVl4V25KalNIQllZVEZ3V0ZaSGVHRldNV1JWVVd4b1YwMHdTbEZYVmxKTFV6RkplRlJ1VmxWaVJrcHZXbGN4TkZkR1drZFdiVVpyVFZaS1NGWXlkR0ZYUjBwMFZXeG9WVlpzY0ROYVZscDNVbXh3U1ZSdGFGZGhNMEkxVjFSQ1YyTXhXWGxTV0docVUwWndZVlpyVm5kU01YQldWMnM1YWsxcmNFbFpWVnBQWVZaS2RWRnNhRmRpVkVVd1dWUktTbVZHWkhKYVJtaG9UV3hLV2xkWGRHOVJNazV6Vld4a1YySnRVbk5WYlhoaFYxWndWbGR0ZEZkaGVrWjVWakZTUzFadFNraGhSRTVYWVd0R05GcEdXa2RqYkZaelZtMW9UbGRGU25aV2JHTjRaVzFXUjFkdVVsUmhNbEpaV1d4a05GWldWbk5XYm1SWFZteHNOVnBWWkRCVWJFcHlUbFJDVjFadGFIWldNR1JHWlVkT1IySkdjRmhUUlVwWlYxUktORlV4WkVoV2ExcHJVbXMxVDFZd1ZrdFhSbHB4VTJwU1ZVMVdjRmxWTW5SaFlWZFdjbU5HYUZwaVIyaFVWakJhV21WWFZraFNiWEJPVmpGSmVGZFVRbUZrTVZKelUyNVdVbUpGV2xoWlYzUkxZMnhXTmxKck9WZE5Wa294VmtkNFlXRkhWbk5YYm1SWFZqTm9kbFZVUmxOU01XUjFWR3hhYUUweFNubFdSbHBoWXpBMVIxZHVVbXRTTTFKdlZteFNRMDVXY0ZaWGEyUlhUV3R3U1ZsVldsTldNREZYWTBod1dtVnJXbGhaTW5oM1UwZFdTR0pHVGs1TmF6UXhWbTE0YW1Rd01WaFNXR2hoVWxkU1ZWbHJXbUZYUm14eVdrUlNXbFpzY0hwWGExcFBZa2RLUjJOSWFGWldiV2gyVm1wQmVGZEdWbkZTYkdScFYwZG9lVlp0Y0VkWlYxSlhVbTVPVTJKSFVsaFphMVozVkZaYWRHTkZaRmhpVmxwWVZrYzFTMWxXU1hsbFJsSlZWbFp3TTFac1dtRlNNV1IwVDFaS1RtSkZjRFpXYWtreFZURlJlRnBGYUZaaVIyaFdWbXhhUzFKR1VuSlhia3ByVFZad01GcEZaRzlWTWtWNlVXcFdXRlpGU25aVlZFWmhWakZrYzJGR1dsZFNWWEJ2Vm0xd1QySXlWbk5WYmxKc1VtczFjVmxyYUVOVFJteFdWMjEwYUZacmNIcFphMUpoVmpKS1IxTnJlRlZXVjFKSFdsVmFkMU5XVm5OVmJXeFRZa2hDV2xZeFpEQlpWazE0WWtaa2FWSnNXbFZaYTFVeFZqRldkRTFVUWs1TlZtdzFXa1ZrTUdGSFNsWmpSWEJXVmpOU2VsWXllR0ZXTWs1SlUyeGtVMDB3TkRCWGExWnJVakZLVjFwSVRtRlNWRlpZVkZWU1UwNXNXWGxsUm1SYVZtczFNRlp0ZUd0V01rcHlZMGRvVm1Gck5VUldhMXB6WTJ4a2RWcEhkRTVXYmtKSlZqRlNUMkl4V25KTlZscE9Wa1pLWVZsVVJuZGpiR1JYVjJ0MFUySkZOWHBXTW5oaFlWWmFSbGRzVmxoaVIxRXdXWHBHWVdNeVNrVlhiR1JwVmpKb1ZWWkdWbTlSTVUxNFYyeGtZVkpHU25KVVZscDNaV3haZUdGSVpGWmlWVlkwVlRKNGIxWXlTa2RqUkU1VlZqTm9NMVpxUm1GV1ZscHpXa2RzVjJFelFrcFdNVnBYWVRKTmVGZFlhRlJpUjFKd1dsZDBkMWRHVWxkYVJ6bE9UVlphZUZVeWVFdGlSa3AxVVd0a1YwMXVUVEZXYWtwTFYwZEdTVmRzWkZkTk1FcE5Wa2QwWVdFeFNYaFdiazVoVW0xb2NGWnNXbmRsVmxwMFRWUlNhMDFXYkRSV01XaHpZVzFXYzFkc1pGcFhTRUpJV2xaYVUyTXhXblZVYkdSb1pXdGFORlp0TVRSaU1WbDRWMnBhVTJFeWFHRlVWelZ2WTJ4d1IxZHJPV3BOVjFKNlYydGFUMWRHU2xaaWVrWlhZV3RhVkZWVVJuTldNWEJKVld4a2FXSkZjRlpYVmxKTFRrZEdSMVp1UmxKaVZWcFlWVzE0ZDJWR1draE5SRlpYVW10d2Vsa3dVa05XVmxwWFUydG9WMkZyUmpSWk1uaGhZMVpXYzFkck5WZE5iV2Q1Vm0xd1EyRXhTWGxVV0doaFUwVTFXRmxyWkZOalJsWjBUbFZPYVUxWFVsaFdiVEZIWVcxS1YxSnFVbHBOUmxwb1dWUkdTMk14VG5OVmJIQm9UVzFvUkZkc1ZtRlpWMUpHVFZaV1ZtSllVazlXYlRFelRWWmFkRTFFUmxSTlYxSkpWVEkxVjFWdFNraGhSbVJhVmtWYWFGUlVSbmRYUjFaSFdrWm9VMVpGV2xoV01uUmhZVEpHVjFkdVNtcFNWM2hZVm10V2MwNUdjRVZTYkZwclRVUkdTbGxyWkc5V1JrbDRVMnh3VjJKWVFsQlpha1phWlVkT1IxZHRSbE5YUmtwNFZrWmFZV1F5VmxkYVNFcFlZa2RTYjFWc1VrZFNiRnAwVGxkMFYwMXJjRnBWVjNSVFYwWmFjMk5JU2xkaGEzQlFWV3BHYTJSR1NuTlViRTVvVFRCSmVWWnRNSGhrTVVWNVZWaG9XRmRIYUZsV01HUTBZMVpXYzFaVVJsaFdiRnA0VlZjMWExVXdNVmRUYkdSYVZsZE5NVll5ZUdGak1rNUpZMFp3VGxKcmNGRldiWEJDWlVaWmVWUnJXbWhTTUZwVVdXdG9RMVpXWkZsalJYUlZUVlZzTkZrd1ZtRlVNVnB5VGxaU1dtRXlUVEJhVmxwaFpFZFdTRTlYZEU1V1Zsa3dWbXhhYjJJeFdsaFRiazVVWWtkU1lWbFVTbE5rYkZwMFpVaE9WMVpyTlhoV1Z6RnpWR3hhY21OR2NGZFNiSEJVVmxSR1lWZEdUbkphUm1ocFVtNUNXRlp0TlhkV01rNXpZa1prV0dKVlduSlZiWGhoVFZacmQxZHRPVmhTYXpWSFZUSjBjMWRHV25OWGJrcFdZbFJHV0ZwRldrdGpiRnB6Vkcxc1UySnJTbHBXYTFwVFVURk5lRnBHWkZoaVJscFZWakJrYjFaR1VsZGFSazVVVm14d1dWcEZaRWRoVmtweVlrUk9WMDF1YUZSV2FrcEhZMjFPU1Zkc1pGTmlTRUp2VmxSQ2ExWXhTWGhhU0VwUVZtMVNUMVV3VmtkTk1WcHpWV3RrYVUxclZqVlZiVFZQVmtaa1NGVnNiRnBpV0ZKTVZqQmFjMWRIVGpaU2JYUnBVbXR2ZDFkc1ZtRmtNa3BIVjFob1dHRXlVbFpVVmxwM1ZFWnNWbHBHWkd0U01WcElXVlZhYjFZd01IaFRiR3hZVmpOQ1NGWnFSa3BsUjA1R1YyMW9VMkpJUW5kV2JYQkxZakZrVjFwR2FFNVNSVnBUVkZaYWQxTkdhM2RXYlRscFVtdHNObFpYTlV0V2JVcEhVMnRvVjAxdWFHaFZNRlY0VjFad1IxWnRiRk5OVlhCSlZteFNTMDVIVVhoWFdHaFVWMGhDYjFVd1ZuZFpWbXhZWkVoa1ZGSnNjSGhWYlRFd1YwWlpkMWRyYUZoaE1sSjZXVlprUm1ReVRrZGFSbVJwVmtWR05GZHJVa2RYYlZaSFZtNUtZVkl5ZUZSWmJGcExWMVprV0UxWWNFNVdNRFZZVm0wMVIxVnRTa2hWYkVKYVlURndNMVJWV2xOV01rWklaRWRvVTJKSVFqWlhWRUp2WkRGa2NrMVZhR2hTTW1oWVdWZDBSMDVHY0VkWGJHUnFUVlZhZWxrd1pITldNVXBYWTBaS1YySkhUalJVYTFwV1pWWldjMXBHWkdsaGVsWnZWbGR3UzJJeVRrZFdiazVvVWxVMWNGUldXbmRsVmxsNVRWUkNWVTFWY0RCYVZWcHJWbFphV0dGSVdscFdNMmhNVm1wS1QxSXhaSE5qUm1SVFZsWlpNRlp0TVRSWlYwMTVWRzVPWVZORmNHaFZiRkpYVkRGYWRFNVZTbXROVm5CSldsVmpOVlpWTVhKWGEyeFdUVzVvYUZsWGVFdGpNazVJVW14d1YxSldjRTFXYWtKaFdWZE5lRmRzYkdoU00xSlVXV3RhZDA1R1dsVlRhbEphVm14S01GVnROVXRYUjBwR1UyeHNXbUV5VWxCVWExcFhUbXhLY2s5V2FGTmlSWEExVm1wS2VrMVdXWGROV0Zab1VtMTRXVlpxVGxOamJGSldWbGhrYkZKdFVscFpWVnB2WVZaYVYyTklaRmRTYkhCb1YxWlZlRkl4V2xsaFIyaFRUVEZLZGxadGVGTlJNRFZYWWtaYWFGSlhVbGhXYlhoM1VqRlZlVTFYT1ZkTlJFWXhXVlZrYjFZeVNrZGpSV2hhVFdwR1ZGVnFSbGRqTVZKMFlrWm9VMDF0YUdoV2JURjNVekF4UjFaWWFGZFhSM2hVV1d0a1UxWldiSEphUnpscVRWWmFlbGRyV2s5V01rcElaVWhzV0dFeVRURlpWVnBMWkVkV1IxZHNXbWxYUmtwdlYxWlNRbVZHV25KT1ZteHBVbTFvYjFSWGVFdFRWbHAwWTBWa1dHSldXa2hXUnpWSFYwZEtTR0ZJUWxaaGEwVjNWRlZhWVdNeFZuSmFSbFpPVm0xM01GWnRNREZVTWtaSFUxaHNhRkpzU2xoVVZWcDNWRVp3V0dWSFJtdFNNRFZIVkRGYVlWUnNXbkpqUm14WFRXNVNkbFY2UmxwbFZrNXpWbTFzVTJKR2NGZFdiWGhoVXpGa1IxZHVSbE5pUlhCelZXMHhNMDFzVm5STlZ6bFhUVlp3UjFZeWREQldNVnAwVkZob1ZtVnJXbWhaTW5ONFZtMUdSMWRzWkZOV1dFSllWbTB4TUZZeGJGaFViazVwVWtad1ZGbHJWVEZqVm14eVZsUkdiR0pHV2xsYVZXUXdWakF4UlZGcVZscFdWbGt3Vm1wS1MxSXhUbkprUjBaWFZqRktURmRzV21GVE1XUlhZMFZhVDFadFVuQlZiVFZEVFRGYWMxVnJUbWhOVmxZMFdXdGFhMkZXVGtaT1ZtUmFZVEpTVkZacldsZGtSMVpHWkVab1UySldTalZXYWtwNlRsWmFjazFXV21wU1JVcFdWRlphUzFkR1dYbE5WVnBzVWpBMVNsWXllSGRoUlRGWlVXNXNWMVo2UlRCV1JFcFRWakZTZFZSc2FHaGxiRnBaVjFkMGIxRXhaSE5YYmxKT1YwZFNWVlJXV2xkT1JsbDRZVWhPVmsxWFVrcFZWelZEVm0xS1dWVnJlRmROUm5CVVZteGFTMk50VWtoaVJUVlhZbXRKTWxadGVHdE5SbEY0VjJ0YVRsWnRVbkZWTUdoRFdWWlNWbGR1WkdwaVIzaFhWakowTUZZeVJqWldiSEJXVmpOb2FGbFdXa3BsUmtwWldrWmtWMUpWY0c5WGExSkhVekpOZVZScldtbFNiRnB3VldwS2IyUXhXbGhqUldSVVRWVTFTRll5ZEc5aVJrbzJZa1phVlZac2NETldNVnBXWlZkV1NWUnNXbWxXV0VKSVZrZDRhMkl4V25SVGJsWlNZVEpvV0ZSVlduZE5NVlowWlVoa1UwMVlRa2hXVjNocllVVXhXVkZVU2xkTlZrcEVXVlJLU21WR1pGbGhSbEpZVTBWS2IxWlhkRlpOVm1SSFlrWm9hMUl3V205VmJURTBaVVpXZEdONlJtbFNiSEI2V1RCU1IxWXhXWHBoUmtKYVZsWldORnBGWkVkU01WcHpZVVprYkdFeGEzbFdhMXBoV1ZkRmVWUllhR0ZUUmxwVldXdG9RMk14YkhKWGJtUnJUVmRTV1ZwRldtRlViRnAwVld4b1dtRXlhRXhaVlZwTFYxWldjMkZHV21sU2EzQkpWbXBLTkZZeFpFaFdhMnhoVW0xb2NGVnROVU5YYkZweldraGtWVTFYVWtoV01qVlBZV3hPUm1OR1pGcGlSMmgyVmxWYVdtVkdaSFZhUms1T1ZtNUNOVlpIZUd0ak1WbDVVbGhzYTJWcldsaFpiR2h2VmtaVmVVMVdaRk5OVm5CYVdWVmFWMkZXU1hsaFJscFlWbXhLVEZSclpFZFNNVnAxVW14S2FWWldjRmxXUmxwaFV6RlplRmR1VW14U01GcFdXV3RhZDJWc1duUmpSazVYVFd0d1ZsVnNhR3RYYkZsNlZHcFNXbVZyV2xCWmVrcExVakZ3UjFSck5VNVdWemg1Vm0wd2VHUXhUWGhUV0d4VlltczFWbGx0ZEhkVU1WcDBaVWhrV0ZKc1ducFdiVFZoWWtkS1NGVnNhRmROYWtaSVZteGtTMVl4WkhOaVJtUlhZbGRuZWxZeFdtRlRiVkY0V2toS1VGWnRVbkJWYWtwdlVsWmFjVk5xVWxwV2F6VkpWbTEwYjJFeFNYcFZhemxhVmtWYU0xWXdXbUZTTVdSMFQxWldUbFp1UWtwV1ZFa3hVekZSZUZkdVRsaGlSMmhoV1ZSR2QwMHhVbFZTYlVacVlrZFNlbFpITVhkVWJHUkdVMnRvVjFKRldtaFdWRVpXWlZaT2NtSkdTbWxUUlVwWlZrWmpNVlV5UmtkaVNFWlRZa1UxY2xWdGRIZFhiR3QzVjJ0MGFGWXdjRXBWVjNoM1ZqSkdjbE51V2xaV1JWcFVWV3BHYTJSV1ZuUmpSVFZPWWxkb05GWXhXbTlrTVZsNFYxaG9XR0pIYUhOVmJGVXhWMFpTVjFadVpFNVdiRnBaVkd4a01GWXdNVmRpUkZwV1ZqTlJNRlpzWkVabFZsWnpVV3hhYUdFeGNGbFhWRW8wV1ZkTmVGWnVUbWhTYXpWUFdXeGtibVZXV25SbFIzUnJUVlZhZVZSV1dtRlViRnAwVld4c1dsWkZjSFpXUkVaWFkyeGtkRkpzYUZkaVdHZzFWbXBKTVZReFVYbFRhMmhzVW0xU1dWbFVSa3RTUmxweFVtMUdWMVpyY0hoVlZ6RkhWakZhYzJOR1JsZGhhMjh3VjFaa1RtVkdjRWRpUjBaVFlsWktXVmRzWkRCWlZsWlhWMnhXVTJKVldsUlVWM2hMVTBaVmVVNVdUbWhTYTNBd1ZsZDRiMVl5Um5KT1dFcFZZbGhvYUZreFdrOWpWbFp6WTBaa1RsSXpZM2RXYkdRMFlqSk5lRmRyYUZOWFIzaFhXV3RWTVZsV2JGVlNibVJvVW14d1JsVnRlR3RoYkZweVRsaG9WMVl6YUROV2FrcExWMWRHUjJOR2FHbFNiSEF5Vmxod1MxSnRVWGROVm1SWVlYcHNXRmxzYUc5aFJtUlhWV3RrV2xac1draFphMXBYVmtkRmVsVnNhRnBYU0VKWVZqSjRhMk5zWkhSU2JHUk9Va1ZKZWxaVVNqQldNV1JIVjFod1ZtSlhhR0ZXYTFaaFZFWnNObEpzVG10V2JIQjZWbTB4YzFVeVNuSlRiRnBYVFZkUmQxWnFSbXRrUmxwMVZHMUdVMkpXU2xwWFYzaFhXVmRPVjFWc2FHeFNXRkpWVlcxNFYwNVdVbk5YYlhSb1VqQndSMWxyVWs5V01ERjFZVWhhVjJKVVJreFdiRnBMVjFad1IxWnNaRk5XYmtKWlZqSjRWMWxYVVhoVWJHUnFVbGRvY2xWcVNqUldSbHB5Vm14a1QySkdjREJhUldRd1ZERkpkMkpFVWxkTlYyaDZWbXRrUzJOck5WZGlSbkJYVWxSV1ZWWnRjRWRqTVZwWFUyNUthMUpyTlZSWmJHaHVaREZrYzFadGRFNVNiVkpJVlRKNFYxVXlTa2hWYkd4YVZrVndVMVJWV25OV01XUnlUMVpPYVZKVVZqWldNblJoWVRKR1NGSllhR3BTYkZwWVZtMTRTMU5HV2xWU2JYUlRUVlpLTVZaSGVHOWhWbGw1WVVaQ1YxSnRUWGhaYWtaYVpVWndSMXBHV21oTk1VcFlWa1phYTFVeFRrZGhNMlJYWWxoU1dWVnFRbmRsVm10M1lVVTVWMDFyY0VoVk1qVjNWakF4VjJORVRsWmlXR2d6VlcxNGQxSXhjRWhoUjNob1RWZDNlbFpxUm1GV01WVjRVbGhvWVZKWFVsbFpiWE14WTFaVmQxWnVaRmRpUjNoV1ZUSjRUMVpXU25OWGFrSlZWbXh3VUZaVVFYaFdhelZWVVd4d2FFMVdWalJXYlhSaFV6RmFkRlJyYkZoaVIxSndWbXRXUjA1R1pISlZhMlJYWWxaR00xUnNXbXRaVmtwelYyNUNWbUpVVmtSV01GcGhZMVpHZEdSR1drNWhNWEJKVm14a05HRXlSa2RUYkZwUFZtMTRXRmxzYUc5VVJuQlhWMjVPVjJKSFVqQmFSVnB2WVZaS2RWRnFWbGhXTTFKVVZsUkdXbVF3TVZsU2JHUm9UVzFvV1ZaR1pIZFNNVTVIWVROc1RsWlViRlJVVmxwaFpXeHJkMXBIT1ZWaVJuQXdXa1JPZDFZeVNraFZXR1JhVmtWYVRGcEZXbGRYVjBwSFYyMW9UbGRGU2xsV01XUXdZVEpKZUZkclpGWmlSMUpZV1cxNGQyTXhiSEpYYms1UFZtNUNSMVl5TVRCaFJrcFZVbTVzV2sxSGFETldNakZIWTJzMVdXTkdaR2hOV0VKNVZsUkdZVkl5VFhoVmJrNXFVako0VkZSWE1XNWxWbGw0Vld0T1dsWXdNVFJXTVdodllXeEtXR0ZHUmxkaGF6VkVWa1JHWVdOV1VuUk9WM1JPVm01Q1NWWnFTalJaVmxKelYxaGtXR0p0ZUZaV2JYaGhaR3hzY2xkcmRGTmlSMUo2V1d0YWEyRkZNVmRpTTNCWVlrZFJNRmRXV2t0ak1YQkpWR3hvYVZkR1NsQldiWGhUVm0xUmVGZHJWbE5pVlZweVZGWmFTMlZXVWxkaFJtUm9VbXR3V0ZZeWVITldNa1p5VGxaU1drMXVhRmhVYlhoUFkyczVWMkZHVG1obGJGcG9WbXBLTUdFd01VZFdXR2hZWW10d2NWVnRNVzlYUm14ellVVk9WbEp0ZUhoVk1uaHJZV3N4V1ZGcmFGcFdWbFY0VmpCYVMxZFdSbk5SYkdScFYwZG9WVlpXVWtKTlZsbDRXa2hLYUZKVWJGaFpXSEJYWkd4YWRFMVVRbXROVld3MFZteG9jMVJzV2paaVJtaFZWbXh3TTFWcVJuSmtNa1pHWkVab2FHVnJXa2xYVkVKdlpERlplVkp1U2xoaWJYaG9WbTV3UjFOR1ZYZGFSazVUWVhwV1dWbFZWVEZoVjBwV1RrUkdWMkpVUlRCV1ZFWk9aVlpXV1dGR1RsaFNNbWhYVjFjeGVrMVdXbGRYV0dSaFVtczFjVlp0ZUdGTlZtdDNZVVU1V0dKR2NERlZWM2h6V1ZaS1dHRklTbGRoYTBZMFZtcEdUMk15U2tkalJUVk9UVVZ3U2xadGVGTlJiVlpJVkZob1lWTkZjSEZWYlRGVFkwWmFjbFp0UmxSV2JIQjRWVmN4UjFaSFNsZFhiR3hXWWxoU2VsbFhlRXRrUmxaeVQxWmthR0V6UWpKV1J6RTBZVEZrU0ZScldtdFNhelZQVm0weE0wMVdXbFZUYWtKb1RXdGFXRlV5TlU5WFIwcHlVMnhvVlZaWFVsUmFSM2hoVmpGa2RHUkdaRTVYUlVwSFZteGtORlF4VW5OVGExcFlZa2Q0V0ZSWE5WTmhSbXh4VTJ0a2FrMVZOVEZXYlhoTFlVZFdkR1ZHYUZoV00yaFVWbXBHUzFJeFdsbGhSbWhwVmxad2VWWlhlRk5TTVdSeldraEtZVko2YkZoVVZscDNVakZaZVdOSFJsZE5WbkJIV1ZST2IxWXhTa1pYYldoV1lsaE9ORlp0ZUhkVFIwcEdUbFUxVGxKWVFuWldha1pyVGtkSmVGWlliRmRpYXpWdlZGUktVMkZHVm5SamVrWlhWbXhhZUZWdE1VZFdSbHAwWlVoc1dHRXlUVEZaVlZwTFZsWktjVkpzYUdsaWEwcEpWbTF3UjFsV1NuTmFTRlpVWWtaYWIxUldXbHBsYkdSelYyMUdWVTFzU2xoV1J6VlRZVEZLY2s1WVFsWmlSMmhFVkZkNFlXTnNaSFJqUjNoVFZrWmFTVlpzWkRSaE1XUklVMnRvVm1KVldtaFdhazV2WVVaYWMxZHNUbGROYTFwSFZrZDRUMVJzV1hwaFJtaFhZbFJHTTFWVVJtRldhekZYV2tkd1UySklRbWhYVmxKTFlqRmtSMWRZYkU1V1YxSnhXV3RWTVdWR1draGxSMFpvVWxSR1dsVlhOWE5XTVZsNlVXdG9WMUpGY0ZCV2FrWnJaRlpXYzFSdGJGTk5WWEF6Vm14a05HRnJOVlpPVm1SWVltczFiMVV3WkZOVk1WSlhWMnRrVDFKc2NEQlViRnBQVm1zeFdGVnJiRmRXZWxaSVZtMHhSMk50U2paUmJHUm9UVmhDVlZadGNFZGhNbEpYVlc1S1VGWnRVbkJWYWs1cVpVWlplV1ZHWkdoTlJFWklWbGMxUzFSc1duUmhSa1pYWVRGd1RGWnFSbUZqVmxKMFQxWmtVMkpJUWxwV1JscFhUVWRGZUZOWWFGaGhNbmhYV1d4b2IyTnNXa2hsUlhCc1VtczFlbFp0ZUc5V01EQjVZVWM1V0ZkSVFraFdNakZYVTBaT2NsWnNhR2xTVkZaM1ZtcENZVk14VmtkYVJtaHJVbTFTY2xSV1pEUlhSbGw1VGxVNVdGSXdjRnBWVjNoRFZqSktXVlJZYUZWV1ZuQlhXbFprVTFOV1VuTmFSbVJPVTBWR00xWXhXbGRaVjAxNFYyNVNWR0pIZUZaV01HUnZWakZzVlZKdVpHaFNiWFExV2xWa01HRXhXblZSYTJoYVZsWndVRmxXV2t0WFZrWlZVV3hrYVZJd05IcFhiRlpyVlcxV1YxTnVUbUZTYldoWlZUQldTMkl4V2xoa1JscE9WbTFTV0ZscmFFdFhSMHAwVld4a1ZtSllhR2hXYlhoWFpFZFdSazlXWkU1U1JWbzFWa2Q0VjJJeFpIUlNXR2hxVTBad1lWWnRlSGRqYkZWM1drVmtWRlp1UWtoWGExcHJWR3N4Vm1ORVVsZGhNbEV3V1ZSR1RtVldVbGxoUmxwcFlYcFdkbFpYY0V0T1JscFhWbTVPYUZKVk5WaFphMXAzVTBaYWRHVkhSbFZpUm5CNlZtMXdVMWR0UlhoalJtaFhWbnBHVEZwRldsZGtSVGxYV2tkc1dGSnJiekpXYTJRd1dWWmtkRlpyYUZOaE1uaFdXV3RrYjFaR1VsWmhSVTVVWWtad2VsWXlNRFZoTURGWVZXdHNWbUpVVmt4V01HUkdaVVpPYzJGR2NGZFNWbTk2VmxSQ1lXUXhTWGhhU0VwaFVqTlNWRlJWYUVOVGJHUllaRWQwYWsxV1ZqUldNalZUVlVaYVIxZHNhRnBXTTFKb1dUSjRVMVpzY0VaWGJYaFRZbFpLWVZZeWRGWk5WbVJIVTJ4V1YySnRhRmhXYm5CRFRrWnNjVk5yT1dwTlZscDZWbTE0UzJGRk1IaFRiRlpYWWxSQ05GWlVTbGRTTVZwWllrZHdVMVpVVmxsV1YzaFRVakZrVjFkc2FFOVhSMUpaV1d0YWQxZFdXa2RWYTJSWVlrWndXVlpYZERSV2F6RlhZMFZvV21WcmNGQlZha1pyWXpGd1JrNVZOVk5YUlVwSVZtMHdlRTVHV1hoaVJtaFdZbXhLV0ZsclduZFZWbHAwWlVoa2FtSkdXakJhUldoclZsVXhWMk5JY0ZkTmFsWnlWa1JLUzFOR1ZuTmpSbkJPVW14d2VWZFdVa0psUm1SSFZtNU9hRkp0YUc5VVZ6RnZWbFprV0dSSFJsUmlWbHBaVm0xMGExWlhTa2RYYkdoWFlsaG9NMVl3V21GU01XUjBVbXhrYVZac2NFbFdha2t4VlRKRmVGTlljRkpoZW14aFdWUkdZVTB4V1hsbFIwWnFUVmhDUmxWWGVHRlViVVY0WTBWc1YyRXlVWGRYVmxwaFUwWk9kVk5zVW1sV1ZuQm9WMWQwYTJJeFdrZFdhbHBUWW0xU1dGbHJaRk5OVm1SeVYyczVhRlpyY0hsWmFrNXJWakZKZW1GSVNscGhhMXBoV2xaYVQyTXhjRWRVYkdoVFRXMW9ZVlp0TVRCV01VMTVWRzVPV0dKR1dsUlpXSEJ6WTFaU1YxWlVSazVXYkZZMVdUTndWMWRHU25KalJscFhZbGhvTTFacVNrdFhWbFp6V2taV1YySklRbmxXVjNCTFZERkplR05GYUZOaVJUVllWRlpXZDFsV1duUk5TR2hQVW0xNFdWWnRkR3RYUjBwelUyNUtWazFIVWxSV2FrWlRWakZ3UjFSc1VsZGlXR2hZVjFaV2IyRXhaRWRUV0dSWFlXeGFXRlZxVGtOV1JscHhVMnRrYW1KVk5VZFVNV1JIVlRGS1ZsWllhRmRoYTFwb1ZXcEtUbVZHVW5WVWJVWlRWa1phZDFkWGVHdGlNVlpIVjI1U1RsWkdTbGRVVmxWNFRURlNWMVp0ZEZkaVZWWTFWbGQ0VTFZd01VaFZibHBhVmxad1dGcEZWWGhXTVZKelYyeE9hVkp0T1ROV2ExcGhWVEZGZUZWWWFGaGlhelZ4Vld0V1MxWnNiSEphUmtwclRWZDRWMVpzYUc5V01rcFdUbFZrV21FeGNGaFdSM2hoWXpKRmVscEdaR2xTTVVreVYyeFdZVmxYVFhoalJXeFhZbGhDVkZsdGRFdGxiR1JYVld0a2EySldXbnBXTWpWSFZUSktWbGR0T1ZWV00yaE1WVEZhWVdSSFVraFBWMmhYWVROQ05WZFVRbFpPVmxwMFUydGthbEp0VW1oV2JGcDNZVVphYzFkcmRHcE5XRUpJVmpKek1WWXhXblZSVkVwWFlsaFNhRmxxU2tabFJtUnpZVVpTYUUxdGFIWldWekI0VGtac1YySklUbWhTZW14UFZGWmtNRTVHV1hsT1ZUbFhUVVJHV0Zrd2FITlhhekZIVmxob1YxWkZjRWhVYlhoaFl6SkdSMXBGTldsaVJXOTVWbTEwVTFNeFNuUldhMlJoVTBVMWIxVnFUbTlXUmxsM1ZtdDBXRkpzY0VoWGEyaHJWVEF4YzFOdWNGcGhNWEJ5VjFaYVMxZFdWbk5pUmxwcFYwZG9iMVpHV21GWlZrNUlWbXRrVldKR1duQlZiR1F6VFVaYVdHVkhPV2hOVjFKSVZqRm9kMVp0U25KalJtaFhZVEZhTTFacldsZGpWa3AwWkVkMFYySklRalpXYlRCNFlqRlNjazFZVW1oU2JrSllXV3RrVG1WR2NFVlRhelZzVW14YWVsZHJXbXRoVmtwelkwWldXRlpzU2t4V1ZFcFBWakZXYzJGSGNFNU5iV2hSVmxjd2VFNUhWbGRYV0d4UFZsUnNiMVZ0ZUhkbFZteHlWVzFHV0dKR2NGbFpWVlp2VmpBeGRXRkhhRnBsYTFweVdUSjRkMUl4V25SaVJrNXBZVEJ3VTFadE1IZGxSVFZJVkZoa1QxZEZOVmxaYlhoTFkyeFdjMVZzWkZoV2JGcDZWbTAxYTFkc1duTmpTR3hZWVRGS1JGbFZaRWRPYkZwellVWndhRTFZUW5sV2FrSnJVakpOZVZSclpHaFNia0p3VmpCYVMySXhXblJOVkZKWFRXc3hORll5ZUZkVk1rcEhWMnhTV21KWVVreFdNVnBoWTFaT1ZWSnNWazVoTVhBMlZsUkpNVk14VVhoWGJsWlNZa2RTV0ZsWGN6RlZSbEp5VjI1T1YwMVlRa2RXTWpFMFlWWktWMkl6YUZoV1JVcG9XVlJHVTJNeFpIVldiRXBwWWxob1dWZFhkR3RVTURWSFZsaHNUbFpyY0hOV2JYaGhaVlprY2xkc1RtaFdiR3cyV1ZWYVExWXhXa1pUYkdoV1pXdGFURmw2Um10a1ZsWjBZMFpPVjFaR1dqUldNV1EwV1Zac1YxcEZaRmhpUjJoUVZteG9VMWRHV25GUmJHUk9UVmQwTTFZeWRHdFdNREZ5WTBWc1YxWnNTa1JXYlhONFZqSk9SMXBIUmxkaVJsa3dWbXBDVms1V1pFaFNhMmhvVWpOb2IxUldZelJsVmxwMFRVaG9UMUl3YkRWV1JtaHZWMGRLU0dGR1VsZE5SMUpVVmtSR1ZtUXhjRWhQVm5CWFlraEJkMWRzVm1GWlYwcEhVMjVTYTFKR1NsaFVWelZ2WTJ4c1ZWSnJjR3hTYlZKNVdXdGFkMkZGTVhOVGFscFhZbGhDU0ZkV1drcGxSbVIxVW14a2FWSXhTblpYVmxKS1RsVXdlRnBHWkZaaE1sSmhWbXBHUzFOR1draGxTRTVvVm10d2VsVXlNRFZXVmxvMlVtNWFWMkpHY0hKV2FrWjNVbFpXYzJOR1pFNVNia0pLVm0xd1IySXlSWGhYV0d4VVltdHdVRll3Vm5kV2JGcDBaVWhrVlZKc1ZqUldNbmhQVmpBeFdGVnViRlZOVjFKMlZtcEtSbVZzUmxsYVJtaG9UVlp3VlZadGNFZFpWbHB5VFZaa2FGSnNjRmxWYWtaTFYyeGFkRTFVVW10TlZtdzBXVEJhYTFkSFNuUlZiRlpYWWxSV1JGVXdXbFpsVjA0MlVtMW9WMkpJUWpWWFZ6VjNVakZaZVZOclpGUmhNMUpvVm14YWQxZEdjRVpYYlVacVRXdGFTRlpYTVc5VWJGcDFVV3hXVjAxWFVUQlpWRXBLWlVaYVdXRkdXbWxTYmtKWlYxY3hOR1F5VFhoWGJsSk9WbXMxV0ZscldtRlhWbEpYVld0T1YwMUVSa1pWYlRWM1Ztc3hkV0ZJU2xoV2JIQk1WbXBHYTJSV1pITmFSMmhvVFRCS1RsWXhhSGRTTWtWNVZXdGtWR0pzU2xSWmEyUlRZMFphY1ZOdE9VOVdiR3cwVmxkMFQxZHNXWGhTYWxKWFVqTm9kbFpyWkVabFIwNUpVbXhhYUdGNlZrVldiWFJoV1ZkT1YxVnVVbEJXYkVwd1ZXMDFRMWRzV2tkV2JFNVRUV3RXTTFSV1dtRlVNV1JKVVd4a1ZWWnRVblpVVkVaYVpWVXhWMXBIY0dsV1ZGWkpWbXRrTkZZeFdYbFdia3BZWWtaYVdWbHJXbmRoUmxwMFRWWmtXRkpzV25sV01uaERWakpLV0dGR1ZsZFNiSEJZVmpKemVHTXhaSFZWYXpWVVVqSm9VRlpYTVRSVE1sWlhWV3hrVjJKck5WZFpiRlpoWlZaU2MxZHVUbGhpUm5CSFZqSXhiMWRyTVhWaFIyaGhVbFpXTkZadE1VOVRSMUpHVGxkb1RrMUZjRTFXYlRFMFlXMVdTRlJZYUZoaE1sSlZXVzEwZDJOV1ZYZGFSemxZVW14d01Wa3dXbXRVYXpGWVpIcEtWbFpzU2toV2FrRjRZMnMxVmxwR1pFNWliV2haVjFaV1ZtVkdTbGRYYmxaWVlrZFNjRlpyVmtwTlJscElaRWRHYUUxck1UUlhhMmhMWVVaS1ZWWnNhRlppV0ZJelZtcEdZVkl4Y0VWUmJIQlhUVlp3TmxadGVHOWpNVkp6V2tWb1ZtSkhlR0ZaYTFwaFRURmFkR1ZHWkd0U01WcEpWREZhYTFZd01VZFhWRUpZVmtWS1ZGWkVSbHBrTURGV1drZHdVMkpGY0ZsV1JsWmhWbXN4VjFkdVJsUmhlbXhWVldwQ2QxTkdaSEpYYlhSb1ZteHdTVmR1Y0VkV01rcFZVbXBPVm1WclJYaFZha1poVjFkR1NGSnNVbE5YUlVwUlZtMHhORmxYVVhsVVdHaFhWMGRTV1ZsVVRsTlhSbHAwWlVoa2JGWnNjREJVYkdRd1ZqSktSbU5JY0ZkTmFsWjJWbTB4UzFkV1ZsbGFSbkJYVFRBME1GWnFRbUZXTWsxNFdraE9XR0Y2VmxoWlZFNURWMnhaZUZkc1pGZGlWbHBJVjJ0YWExVXlTbkpPVm1oYVlUSm9SRll3V21GalZrcHlaRVphVjJKSVFtRlhWRUpYVFVaWmQwMVdaR3BTUlVwWFZGYzFVMlZzYkZkWGEzUnJVakJhU0ZsVldsZFdNVXBXWTBVeFdGWnNXbWhYVmxwS1pVWmtkVlJ0UmxOV1JscFZWbTEwWVZsV1pGZFhia3BhWld0YVYxUldXbmRYVmxaellVaGtWMkpWY0hsVWJGcHZWMnhaZWxSWWFGZGhNWEJVVm14YVMyTXhaSFJsUms1cFlUQndURlp0ZEdwbFIxRjVVbXhrVkdKR1dsUldNR2hEVjBac1ZWTnNTazVTYlhjeVZXMTRhMkV4U25KT1ZFWlhWbnBGTUZaVVNsZGtSMVpIWWtab1YyVnJSalJXVmxKSFYyMVdTRlJyV2xkaVJUVnZXbGQ0WVdWV1drZFhiVVpVVFd4YVdGa3dWbUZYUjBwMFZXMDVWbUpHU2tSVWExcFdaVmRPU0ZKc1pFNVdXRUkyVm1wSk1WTXhaSE5YYTFwWVlrZFNhRlpzV25kamJHdDRWMjEwYWsxWVFrbFphMlJ2Vkd4a1JsTnVXbGRoYTFwb1dWUkJlRk5HVmxsaFJtaG9UV3hLZDFaVVFsZGtNV1JIWWtoU2FtVnJXbGhWYlhoTFYwWlplV1JFUW1sU2EzQjZWakp3UTFsV1dsaGhTRXBYWWtkU1RGWnRlR3RXVms1eldrZHNWMUpzYkRaV2JYQkRXVmRGZUZSc1pGTmlhelZUV1d0a1UxWkdjRmhrUjBaVVZteHdXVmt3VmpCVk1ERldZMFJDVm1KWVVtaFdWVnBoWkVaV2NrOVdXazVTYkhCTlZtdFNSMWR0VmtkalJWWlNZa1p3VDFac1dscE5WbHBWVTFSR1ZVMVdiRFZWTWpWUFZrZEdObUpHYUZWV1ZuQlhXbFZhY21WR1pITlViR1JPWVRGd1NGWnJaRFJoTVZsNVUydGthbEp1UWxsWmExcGhZVVphUlZKdGRGUlNhelY1V1ZWYVlXRkZNWFJoUjJoWFVteGFjbGxxUmxkU01XUlpXa2RHVTFadVFubFdSbFpUVmpGWmVGZHNhR3hTTUZwWVZGZDRZV1ZXV1hsbFJXUlhUVlZzTmxsVlpHOVdiVVp5VjI1S1ZrMUdjRkJaTW5oclpFZFdSMVJzWkZOaVNFRjZWbTE0YW1ReVVYZE9WbHBQVmxkU1dWbHRkR0ZXUm14elZXNU9hbFpzU2xsWk0zQkhZa2RLUjJORmFGcFdWMDB4V1ZWa1MxSnRUa1ZSYkhCWFZqSm9VVlp0TVhwbFJrbDRXa2hLYkZKdVFsaFdiVFZEVG14YWRHTkZaRnBXTURVd1ZrZDBiMkV4U2xWV2JHeFdZa1phTTFZeWVGcGxSbVJ6V2taa1RsWnJXVEZXVnpFMFlURmFTRk51U21wU2JGcGhXVlJHZDAweFduUmxSMFpxVFZoQ1NGWkhNVFJoVmtsNllVUldWMDF1VWxoVVZWcHJVakZrV1ZwR2FHaE5NRXBhVjFaU1IyUXlVbk5YYmtaU1YwZG9jbFpxUW1GU01YQldWMjEwVmsxc1dubFdiWEJQVmpKRmVGTnJlRlpsYTNCVVZXcEdVMlJXVG5SaFJrNU9UVlZ3VmxZeFkzaE5SazE0V2toT1dHSkhhRTlXYTFaTFkyeFNXR1ZGZEd4aVJuQjZXVlZqTlZZd01YSmpSV1JhVFVkb1RGWnNXbUZrUmxKVlVteFdhVkp1UW05WGExWldUVlpaZUZWdVVtbFNhelZ2V2xkNFlWTldXbk5WYTNCc1VtdHNORmRyYUU5WFIwcHlUbFpXV21FeVVuWlhWbHBUVmpGa2RWcEhlR2xTTTFFd1ZtcEtlazVXWkVkWFdHUllZVEo0YUZWc1dsWmxSbXhXV2taa2FrMVdjSGhXUjNocllWWmFSbE5ZY0ZkU2JIQnlWbGN4VjFZeFRuVldiRnBwVWpGS2QxWlhjRXRpTWxKelYyeFdVbUpWV2xWVVZtUTBWMFpaZVU1V1RsVmlSbkI1V1RCVk5WWnRTbFZTVkVKaFZteHdhRnBGWkU5U2JGSnpXa2RzVjFkRlNsbFdNV1F3VlRGUmVGcElTazVXVjJoWFZqQmtVMWRHVm5WalJXUlZVbXhzTkZZeU5XdFZNVnB6VTI1d1dsWldjSEpaVmxwTFpGWkdjMU5zWkdsU2JrSlZWbGh3UjFadFZsZFdia3BoVW14d2NGbFVUa05rYkZwWVRVaG9WazFyTlVoWmEyaExWMGRLZEZWc1dscGhNWEF6VmpGYWNtUXhXblJrUm1ocFVtNUNWMVpYTVRSaU1XUklVbGhvYWxOSVFtRldiWGgzVkVaV2RHTjZSbGhTVkd4WVYydGtiMkZGTVZsUmF6RlhZVEZ3YUZkV1dtRmtSbHB5WVVaT2FFMVlRbGRYVjNSaFV6Sk9SMVp1VG1GU1JUVnpXV3RhZDJWR1ZYbE9WM1JZWWtad2Vsa3dWbTlXTURGMVlVaGFXbFpXY0V4VmJYTXhWMFpLZEZKc1pFNU5WWEJKVm10YVlWbFhUWGxWYTFwT1ZteHdjVlZxVGxOVU1XeFpZMFprVkZKc2NIcFhhMUpUWVZVeFYyTkZhRlpOYm1ob1dWWmtWMk50VGtkaFJuQlhVbFp3YjFkVVJtRlZNVmw0WTBWYVdHSllhRmhaYTJoRFRteGtWMVp0UmxWTmExcFlWVEZvZDJGR1NuUmhSbXhYWVdzMWRscEhlSE5qVmtwelZHeGtUbFp1UWpaV2JURTBVekpHV0ZOc1pGUmliWGhZVlcxNGQyTnNVbkphUm1ScVRXdHdTRll5ZUd0aFIxWjBaVWhhVjFKdFVYZGFSRVphWlVaV2RWUnNXbWhOYkVwWlZrWmFZV1F3TVVkWGJHaFBWbGhTV1Zsc1ZsZE9WbHBZWkVSU1YwMUVSbGxXVjNSdlZtc3hWMk5FVGxaaGEzQklWV3BHZDFKck5WWk9WMnhYVmtaSk1sWnRNWGRUTURGSFlrWmthVkp0YUZkV01HUnZZVVpXZEUxWE9WZFNiWGhXVlRJd05XRnJNVmRYYWtKVllrWmFVRmxYYzNoV01rNUpZVVphVG1GcldYcFhWM1JoV1ZkU1IxWnVUbWxTTUZwVVZtcEdSMDB4WkZkYVNIQnNVakExZWxkcmFFOVpWa2wzVjJ4b1YyRnJjSFpXYkZwaFpFVXhTV0ZHVWs1V01VcGFWbGN4TUdJeFZYbFRhMlJZWWtkb1ZsWnJWa3RVUmxKMFpVZEdVMDFXY0RCVmJURjNZVlphY2xkVVJsZFdla1YzVjFaa1JtVkdUbGxpUjNoVFlrVndWMVp0ZUdGVE1VbDRWV3hvYkZJd1duRlphMlJUVFVacmQxWlVWbGROYTFreVZteG9hMVl4V2paU1ZFSmFaV3RhYUZwRldrdGtWbEowWTBaT1RtSlhhRmxXTVdRd1lURlZlVlZ1VGxkaGJIQlVXVzF6TVdOV1duUmtTR1JPVm0xU2VWWXllRTlXYXpGeVZtcGFWbFl6UWxSV2FrWmhaRVpXVlZGdFJsTlNWbkJ2VjFSS2VtVkdaRmRYYms1WVlsZG9jRlZ0TlVOWFZscHlWMjFHYUUxV1ZqVldiVFZQWVVVd2VXVkZPVmRpUmtwNlZtdGFjMk14V25WYVJsSnBVbXh3V2xaR1dtcE9WbHBZVTJ0YVQxWlhhRmRVVnpWVFlVWmFjVk5yWkdwaVJUVXdXVlZhWVdKSFJYZFdhbEpYWWxoQ1RGWkVSa3BsUjA1R1drWm9hVll6YUhkV1ZFSlhVekZaZUZkdVNsaGlSMUpZV1Zod1IxZEdXbk5oUnpsb1ZtczFSMWt3V210WGJGcEdVbGhvV21GclducFpla1poWkZad1JrNVdUbWxYUmtWNVZqRlNRMVl3TVVkWGJsSlRZV3h3VkZsWGRFdFhSbHAxWTBaa2JHSkdjREJaZWs1dllURmFjMWR1Y0ZaV00yaHlWa2Q0U21WR1RuTmlSbVJYVWxWd2VWWnRjRWRVTVU1SFZtNUthRkl5ZUZSWmJGcExaREZhVlZGc1pGTmlWbHBZVmpJMVQxWnRSWGxWYkdoVlZteHdhRlJWV21GV01rWklUMWRvVjFaRlNURlhiRlpoV1Zaa2RGTnNiR2hTV0doWVdWUkdkMlZzV1hkYVJUbFBZa1Z3ZWxsVlpITlZNa1Y2VVcxR1YyRXhjR2hXVkVaV1pVWldkVlJzYUdsaVJYQjVWbGQwVmsxV2JGZFhiazVZWW0xU2NWbHJXbmRUVm5CV1ZtcENXRkpzY0hwV01qVnpWakpLV1dGSGFGZFNla1pJV1RKNGEyTnJNVmRhUjJoT1ZtNUNOVlpzYUhkU01VMTRWMWhvVkdKc1dsZFpXSEJ6VjBac2MxZHJkRmhXYkhCWldsVmpOVlZyTVZoVmJHaFlZVEZ3Y2xZeWMzZGxWMFpIV2taV1YySldTbFZXYWtKaFdWWk9SazVXWkdGU2JIQndWbXhvUTFsV1duTmFSRkpYVFZad01GVnROVXRVTVZwelUyMW9WbUpZYUROWlZWcHlaVmRXU0ZKdGRGTk5WWEJKVmpKMFZrMVdWWGhUYkdScFpXdHdXRlJXV2t0U1JtUlhXa1Z3YkZacmNGcFphMXByWVZkR05sWnVhRmRXTTJoMlZsUkdXbVZHWkhWVGJHUm9UVEZLZWxkWGRHOVJNVXB6Vm01U2ExSXdXbkJWYlhoM1RWWldXR1JJWkZkaGVrWXhXVlZhVTFkc1dsZFdhbEpXWWtad2FGbDZTazlTTWtaSVlrWk9hVk5GU1RGV2JYUnJUVWRGZUZOdVVsZGlSMUpXV1cxek1XRkdWblJOVnpscVVtMTRNRnBGVmpCV01rcEhZMFJDWVZaWFVraFdWRUY0VWxaR2NWVnNhR2hOYldoSlZtMTBhMUp0VmxkV2JrNXBVbXh3Y0ZWdGRIZFhWbHAwVFZSU1YwMVhVa2xXVjNSWFZtMUtSMk5GT1ZaaE1WcExWRlphYTFZeFduUlBWM1JPVmpGS1NsWlhlRzlqTVZwWVVtNU9WR0pIYUdGV2FrNVRUVEZhUlZKdVpGTldhelY2VmtkNFQxUnNXbFZXV0dSWVZqTlNWMVJXV21GU01VNXpWMjF3VTFZeFNsbFhWM2hUVWpBd2VGWnVSbE5pV0ZKeFdWaHdSMVl4WkhKYVJXUldUV3R3U0Zrd1dtRlhSbGw2Vlc1S1YxWkZjRkJaZWtaWFl6SkdTR1ZHVGxoU2EzQldWakZrTUdFd05VaFdhMlJYWWtkb2NWVnNWVEZXTVZKWFZtNWtiR0pHYkRWYVZXaFBWMnhhY21OR2FGZE5WMmh5Vm1wQmVHTldTbkphUjBaWFlraENXVmRZY0V0U01VbDRWMjVPWVZKVVZrOVpiR1JTVFd4YWRFMVlaRkpOYTFZMFZtMDFVMVl5U2toVmJrWldZa2RTVkZaclduTmpiR1IxV2taV1RsWnNjRFpYVmxaWFV6SktTRk5yWkdsU1JrcFpWbXRWTVdOc1draGxSMFpxVFZkU2VGVlhlR0ZVYkZsNVlVUmFWMkpHU2t4VmVrWlBVMFpLY2xwR1NtbFNNVXBRVmxkd1IxTXhXbGRhUmxaVVlXeEtXVmxzV2tkT1JtUnlZVVYwV2xacmJEWldWelZEVm0xS1IxTnNhRmROYm1oeVdYcEdZV1JGT1Zoa1JUVm9UVmhCTWxadGNFcE5WbFY1VW10a1ZHSnJOVmxaYTJSVFYwWnNXR042Um10aVJuQjVWakl4TUZZd01WaFZibkJhVFVkUmQxWkhlRXRTTVdSeVpFWm9WMkpHY0c5WGExSkhWVEpTUjFOdVZsUmlSMmh2V1d0b1ExZFdXbGhOVkZKYVZqQTFlbFl5TlVkVk1rcFdWMnhTVlZac1dqTlVWbHBXWlZkT05sSnNaRTVTUlZwSlYxUkNZV1F4V1hoWGFscFNWMGRvVjFaclZuZFhSbXcyVW01a1UwMXJXa2xhUlZwUFlVZFdjMWRxVmxkTlYxRjNXVmR6TVZack1VbGhSMnhVVWxoQ2RsWlhlRlpOVjBsNFZtNU9WbUV3TlU5VVZscFhUbFp3UmxkdGRGaFNhMnd6VmpJMWMxZHRTblZSYTFKWFRXcEdXRmt5ZUd0alZsSnpXa2RzV0ZJeVpEWldiR040WldzMVYxcEZhRlJoTWxKV1dWaHdWMVpHVm5SbFNHUlZWbXh3TUZSV1VsTlhiRnB6Vm1wU1dtRXhjSEpXYTJSR1pWWldkVkZzVmxkU1Z6aDNWMVJLTkZZeVRYbFNhMlJWWWtoQ1dGbHNhRzlXTVZwVlUycFNWVTFYVWtoVk1qVlBWa2RLU0dWSGFGZGlSMUoyV1RKNFdtUXhaSEpqUjNoVFlUTkNORlp0TVRSaU1rWkdUVlpzVW1FeWVGaFpiRkpIVG14d1ZsZHJkR3BOV0VKSVdXdGtkMVV5U2tsUmJHeFhWak5vZGxWVVNsZFdNWEJIWWtkd1UxZEdTbFpXUmxwclZURk9SMWRyYUd4VFJUVnZXV3RXZDJWc1ZYbGxSemxYVm14c05sbFZWalJaVmxsNllVZG9WMkZyV2xoWk1uaFRZekZXY2s1WGJGTldiWFF6Vm1wR2EwMUhTWGhXV0d4VFlrZFNWVmxyV25kVlJsbDNWbFJHV0ZKdGVIcFdWM1JoVkd4S2MySkVVbGROYm1oUVdWZHplRmRIVWpaVGJGcHBWMGRuZWxadGNFdFRNVWw0V2taV1UySkhhRmhaYTFwM1RXeGtjbFZyWkdoTlZUVklWa2MxUzJGR1NYbGhSbEpWVm5wR2RsbFZXbXRXTVZaeVpFWmFUbFpyY0VsV2JUQXhVekZzVjFOc2FGWmlSVXBoV1ZSS1UxWkdjRmRYYlVaWVVsUkdWMWRyV2xkaFZscFpVV3BhVjFaRmNEWmFWVnBhWkRBeFYyRkdXbGhTTVVwb1ZtMTBWMWxXVFhoalJWWlNWa1ZhV0ZSV2FFTlRWbXQzVjJzNWFGWnRVa2xaVlZwclZqSktWVkpxVGxabGExcFhXbFZhWVdSV1VuTmhSMnhUWWtoQ1ZWWXhXbE5VTVZWNFZWaG9hVk5GY0doVmExWkxWREZTVjFwR1RteFdiR3cxVkZaU1EyRkdTbFZTYkdoYVRVWndNMVpxUmxwbGJGWjFZMFprYUdFelFrMVdiWGhoV1ZkTmVWSnJaR0ZTVkZadldWUkdkMWRzV25SalJXUmFWakZHTkZaSGVHdFZNa3B5VGxoR1ZtSkdTbGhaYWtaelZsWktkVnBHVmxkaVIzY3dWbXBKZUZJeFdYZE5WVlpUWVRKb1dGUlhOVk5oUmxwRlVtMUdhMUl4V2twVlYzaGhZVWRGZDJOSE9WZGhhMHBvVmxSR1lXTXhjRWxXYlVaVFRUSm9XVmRYZEdGamJWWlhWMnhrWVZOSVFsQldha0poVFVaVmVXUkhSbFZpUm5CSFZHeGFiMVp0Um5KT1dGcFhVbFp3ZWxacVJtdGpiVTVJWlVkc1UySkhPVE5XYkdONFRrZEZlRlZ1VGxSaWJGcFRXVmh3UjFkV1duRlVhMDVVVW14d1ZsVnRNVEJXUmtweVRsaHNWMDF1YUZSWlZscExWbTFPUjJKR1pHbFhSVXBSVjFkd1IxUnRWa2RqUldSWFlrVndjRlpyWkRSV01WcEhXa1JDV2xack5VaFdNV2h2WVVaSmVsVnRPVmRpV0ZJelZXcEdXbVZYVmtsVWJHUk9ZVEZaTUZacVNURmpNVnBYVjI1T2FsSkZOVmRaYkdodlRURldkR042VmxkTlZscDZWMnRrYjJKSFNrZFhXSEJYWVd0dk1GWnFTa1psVmxaWllVWmFhV0V6UWxCV2JYaGhXVlphUjJKR2FHdFRSMUpaVm0xNGQyVkdXa2hsUlRsb1lsVndTRll5Tlc5V2JGcHpVMnRvVjJGclJqUlpNbk14Vm0xR1IyTkhhRTVYUlVwV1ZtMXdRMWxXVFhoWGJsSlZZVEZ3V1ZsclpGTlVNV3gwWkVWMFZWWnNjRWhXYlRGSFZsZEtWMWRyYkZkU00xSm9WbXBLUzFJeFRuVlJiSEJZVTBWS1dWWnNWbUZaVm1SSVZHdGFWV0pJUWxoWlZFNURWMVphZEUxVVVtbE5Wa1kwVmpGb2ExZEhTbFZpUjBaYVZrVmFhRnBYZUZOamJHUnpZMGQ0VjAxRVZraFdNblJoWVRGVmVGZHJXbGhoTTBKWVdXdGtVazFHYkhGU2JrNVhUVlUxTVZaSE1YZFdSazVHVTJ4a1dGWXpVbkpXVkVaV1pVZE9SMXBIUmxOWFJrcFdWbGR3UjFNeFRsZGpSbHBZWWxoU1dGUlZVa05PVm1SeVZXMUdWMDFyY0VoVk1uUnZWakpHY21ORlpHRldWbkJRVmpGa1MxSXhjRWhpUjJoT1RVVnZlbFp0ZUd0T1IwVjNUbFZvVldKSFVsaFpiWFIzVjFac2RFMVdUbGROVm5Bd1ZGWmFUMkpHU25OV2FsSlhWak5vY2xacVJrdFdWa3B6V2taa2FWZEZTbFZXYlRCNFV6RmFWMWR1VGxKaVIxSlVWV3hvUTFSV1duUmpSV1JvVFd4S1dGa3dWbXRXTWtwWVpVWlNXbFpGTlVSV1YzaGFaVVprZEdOSGVGTmhla1V3VmpKMFYySXhXbk5hUld4U1lsZG9WMWxzVWtka2JHdDNWMnhrYWsxV1ducFhhMVV4VmpKS1YxTnNiRmRoYTJ3MFZGVmFWbVF3TVZkaFJscG9UV3hLVjFadE1UUmtNbFp6V2taa1dHRXpRbk5XYWtaaFVqRlJlRmRzWkZkTlZtd3pWRlZvYjFZeFNuTlRhMmhYWWxSR1dGVnFSbXRrVmxaelVXeGtUazFWY0ZGV01WcHZaREZLY2sxV1pGaGlSMmhQVm10YVMyTkdVbGRYYm1SVVZteFdOVnBWWkVkV1ZURllWV3RrVmsxcVJraFdNakZHWlVkT1JWUnNhRmRpU0VKVlZtMHhOR0V5VWtoVmEyaHFVbFJXV1ZWc1ZuZFRWbHB5V2tSU2FFMXJNVFJXVnpWVFZrZEZlVlZ1UWxWV1JYQlVWakZhYzJOc1pIUlNiWFJwVW14d1YxWlhNSGhOUjBWNFUyNUthbE5JUWxoWmJHaHZZMnhzVjFwRldteGlSVnA2V1RCYWIxWXdNSGhUYm14WFlrWktTRlpxUmtwbFZsSnlWMjFvVTFaR1dsbFdha0poVXpGa2MxZHVVazVXUlVwaFZteFNSMWRHYkhKaFJYUmFWbXR3V1ZaWGVITldiVXBaVldwT1YySllhR2haZWtaWFkyMVNSMXBIYkZkaVNFRXhWbXhTUzA1R1JYaFhia3BPVjBWYVZGbHJWa3RoUmxaelYyNWtWMUpzYkRSWGExVTFWVEF4V0ZWcVFscGhNbEo2VmpCYVNtVlhSa2RSYkdScFYwZG9lVmRyVWtkVGJWWkhWV3hzYVZKc1NsbFZha3B2WlVaYVdHVkhSbXROYTFwSVZtMDFUMWRIU25SVmJrWlZWbXh3TTFwWGVITldiR1J5VDFaa1RsWnVRWGRYYTJoM1V6RmFjazFZUmxkaVJVcFlXV3RhZDFSR2JEWlNiVVpxVm14d01GVnRlRTlXTURGMFlVVmFWMkpVUlhkV2JURlhVakZrZFZSdFJsUlNWbkJXVjFkMFlXUXhVWGhpUm1oclVqQmFWMVp0ZUhkV2JGWjBUVlZrVjFaVVJucFZNbmh2Vm0xS1ZWWnNVbHBXYkhCTFdsWmtWMU5XUm5OWGJXeFRZbXRHTlZZeWVHRlpWbXhYVjJ4a1ZHSnNTbkpWYkZKelZrWlNWMWR1V210TlZuQjVWMnRTVTJGRk1YSlhhMmhXVFdwV1VGWnJaRXRTYXpWWVVteGthRTFXY0c5V1JsSkhZMjFSZUZwSVZsVmlXRUpQVm0wMVExWXhXbGhOV0hCT1ZqQmFXRlV4YUc5V1IwWnpWMnhvVlZaNlZsUlpWVnByVmpGa2RWUnNaR2hsYTFwWlZqSjBZV0V5UmtoVGEyeFNZa2Q0V1ZacVRtOVdSbFp4VVZoa2JGSnRVbHBaYTJSM1ZHc3hkR0ZJYUZkU2JIQnlWbFJLVjFJeFpGbGlSM2hVVWpGS1YxZFdhSGRTTURGWFlrWmFWMkpyTlZoVVZWSkhWMFpWZVdSRVVsZGlWbHA1V1RCVk5WbFdXbk5qUmxKWFRWZFNVRlZxUmxOa1IwcEhWR3MxVG1KWGFHRldiVEV3V1ZaWmVGZFliRlpYUjJoV1dXdGtVMkZHVm5STlZrNVlWbTE0ZWxsVldrOVdiRXB6VjI1b1ZsWjZWbkpXVkVGNFYwZFdTV0pHWkdsV1JWWXpWbTF3UjFkdFVYbFVhMlJwVW01Q1dGWnFTbTlVVmxweFUxaG9WRTFWYkRWV1IzUnZZVVpLZFZGck9WcGlWRVoyVmxaYVlXUkZNVlZWYkhCWFRVUldObGRVUWxkaU1rcEhVMWhzYUZKVWJHRlpiRkpIWkd4V2NWSnRSbXBOVmxwNVYydGtjMVJzV2xWU1ZFSllWak5TYUZsVVJtdFRSa3AxVkcxd1UySlhhR2hYVjNodlZUSkdSMWR1VGxoaVJUVllWRlphZDAxR1ZuUmpla1pWWWtac05sbFZVbGRXTURGMVZXeG9WVlpXY0doVmFrWlBWMVp3U0dOR1RsZE5NbWhZVm0wd2VFNUdiRlpOU0doWVltdHdXVmxVVGxOalZteHpWbXhrVDJKSGVGZFdNakExVmpBeFZtTkdaRnBOUjJoNlZtcEtTMVpXU25GWGJGWnBVbTVDYUZkc1ZtRlRNbEpYVlc1T1dHSlhlRlJaVkU1RFRURlplRnBFUWxkTmJFWTFWVzEwYTFkSFNuSlhiRTVhWVRKU1ZGa3llRk5XYkZaeldrZDRhVkl6YURWV2FrbDRVakZrYzFkdVNtcFNiWGhZVm01d1YxTkdXbk5YYlVaWVVteGFWbFZYTVVkV01WcDFVV3BhV0ZaRldtaFZha3BQVmpGS2RWUnNWbWxTVkZaM1ZtMHhNR1F4VG5OWGJrNVdZVE5TY2xSV1duTk9SbXh5VjIxMFdGSXdjSGxVYkZwWFYyeFplbFZxVGxkaGExb3pWakJrVTFKdFVrZFhiRTVwVTBWS1lWWnJXbUZXTURGSFYydGtWRmRIVWxCV2JHUTBXVlpzVlZKc1dteFNiWGhZVmpKME1GZEdXbkpYYm1oWFRXNW9jbFpxUmt0V01rNUhZa1prYVZJd05EQldiR040VmpGT1IxUnNiR3BTTW1oVVZGY3hiMVZHV2tkWmVrWnBUVlphZWxZeU5VZFZiVXBXVjJ4V1ZWWXpUWGhXTUZwaFpFVTFWbHBHWkZOTlJuQTJWbFJKTVZReFpIUlNXR3hXWWtaS2FGWnFUbTloUmxWM1ZsaG9VMVpzY0RCWlZWcHJZVlpKZWxwRVdsZGlXRUpNVkd0a1RtVkhTa2RhUm1ocFVqSm9XRlp0ZEZkVE1XUkhWbTVTYkZOSFVsUlVWbWhEVjBaWmVXVkZPVmROVm5CNlZqSTFkMWRIUlhoalJrSlhZV3RHTkZwRlpFZFNNazVIV2tVMWFXSlhhRFJXTW5oWFdWWlNkRlpyWkdwU1ZuQm9WVzE0UzJOR2JGVlNibVJZVm0xU1dWcFZZelZWYXpGWFVtcFNXbUV5YUZCWFZscExWbGRLU1ZSc1pHbFhSMmhaVmtkNFlWVXlUWGxTYTFwUVZteGFiMXBYZEdGT1ZtUlZVVzA1YTAxWFVubFVWbFpyWVd4T1NWRnRSbGRpUm5BelZYcEdkMWRGTVZaYVJsSlRZVE5CZDFaWE1UUmhNa1pYVjI1S2FsSnJjRmhVVnpWVFZrWldjVkpyZEd0U2JIQjZWMnRrZDFVeFdYcGhSbHBZVmpOU2FGVjZTazlTTVZwWldrWmthRTB4U2xaWFYzUmhaREZrVjFWc1pHaFNNMUpYV1Zod1IxZFdXbGhPV0dSWFRXdHdTVmxWYUV0V01WcEdWMjFvVm1GclduSlpla1poWXpGd1NHSkdUazVXV0VKVFZtMTBhMDFHYkZoVVdHaFlZbXMxY1ZWc1duZFZWbHB4Vkd4T1dGSnRlSGxXYlRWaFlUQXhWMk5GV2xaaVZFWklXVlJCZUZZeVNrVlViRlpYVmpKb05sWnRNVFJoTVU1SVVtdGthRkpzV2xoYVYzaGhWbFprY2xwRVVscFdNRFZZVmtjMVQxWlhTa2RUYkZKYVlURmFNMVJzV210WFIxSklVbXhrVGxadGR6RldiVEF4VlRKS1IxTlliR2hTYldoWFdXeFNSMVpHVWxWU2JrNVBZa1UxZVZReFpIZFViR1JHVTJ0MFYyRXlVVEJXYWtwSFYwWktXV05HU21sU2JrSlpWbGN4TkZsV1dYaFZiR1JZWWxoU1dGUldaRk5OVmxwWVRWaGtWazFyV1RKV2JYaDNWMFphZEdGRVRsWmhhM0JZV1hwR2ExZFhTa2hqUms1WFVqTm9iMVp0TUhoTlIxRjRWMWhvVm1Kck5WaFphMVV4VjBaU1dHUklaRlJXYkhCWldsVmpOVll3TVVWU2JHaGFUVVphZGxkV1drdFhSbFp6WVVaYWFHRXhjRlZYV0hCTFVqRkplRlZ1VG1oU2F6VllWbTE0Y21ReFduUk5XR1JUVFd0V05WWldhRzlXYkdSSVlVWmFXbUpZVWpOV1ZWcGFaREZhZFZwR1pHbFNNMmcyVm14a05HRXlSbFpOVm1SVVlrZFNZVlpzV21GVlJteFlaVWRHYWsxVk5YcFdNbmhoVkcxS2NsTnNWbGRoTVVwTVZYcEdTbVZHVW5WVGJXeFRZa1p3V1ZkWGRHOVJNbFpYVjI1S1ZtRXlVbFZaYkZwSFRrWmtjbUZGT1doaVJYQXdWbGQ0YjFkdFNrZFdhazVoVmxad2FGWnNXazlYVjBaSFZXczFWMVpHV2xwV2JYaHFUVlpaZVZKclpGUmliRXB2VlcxNFMxbFdXWGRoUlU1WVVteGFlbFl5TVVkaE1VbDRWMnRzWVZKV2NGQldSM2hoVmxaYWNtSkdaR2hoTWpoM1YxZHdSMk14V1hoVWJsWlVZWHBzV1ZWc1ZuZFhWbVJYV2tod1RsWXhTbnBXVnpWVFlrWktkVkZ1VGxkaGExcG9WV3BHVW1WR1pISmtSbFpwVW01Q1YxWnRlRzloTVZsNVVsaHNWbUZyTlZoWlYzUmhWMFp3UmxkcmRGaFdia0pKV1RCYVUxVXhXbGxSYkd4WFlURndXRmRXV25OV2F6RkpZVWRzVTFKdVFsVlhWM2h2VlRGa1IxVnNaR2hTVlRWVlZXMTRkMU5XYTNwalJtUlhUVVJHV0ZsclVtRlhiRnBYVjI1YVYyRnJjRWRhVmxwVFYxZEdSMkZHWkdsV2EzQktWbTB4ZDFJeVVYaFRiazVoVTBVMVYxbHNaRFJqUmxwMFpFaGthVTFXYkRSV01uaFBWa1V4VjFacVVsaGhNVnB5V1ZaYVMyTXhaSE5VYkhCcFYwVXhORlpxUW1GV01sSklWR3BhVTJKSGFIQlZiWGgzVjJ4a2NsWnRSbFZOVjFKNlZqSjRWMVV5Um5KWGJHeGFWa1ZhVEZsVldscGtNV1IwVW0xd1RtRjZWa3RXYWtvMFlURlplRk5zYkZKaE0yaFpXVlJHUzFSR1ZqWlNhM1JyVW10d2VWZHJXa3RoVmtsNVlVWldWMUpzY0ZoYVJFcFRZekZrZFZWck5WTlNWbkI1VmtaYVlWWXdOVmRYYkdoUFZsUnNZVlp0Y3pGU01WSnpXa1ZrV2xac2JEWldWekZ2VjIxR2NsZHVjRmRpUm5CVVdrVlZOVll4VW5OYVIyeFRZa2QwTkZacVJsTlJNVnB5VGxaa1dHRXlhRlZaYTFwM1YxWnNjbHBFVW1oU2JGcDZWMnRWTVdKR1NuTmlSRTVYVFdwR1NGbFVSa3BrTVdSeVdrWldUbFp1UWpKWFZsWnJVbTFXYzFKdVNrNVdiVkp2V1ZSQ2QySXhXbGxqUlhSV1RWZFNTRlpITlV0aFJrbDZVV3hTVlZaRmNIWmFSRVpoWkVkU1NHUkZPVk5pUlhBMlZtcEtOR0V4V25SU1dHeFdZa1pLVmxacVRrOU9SbEp6VjIxR1dGSXhTa2xhUldSdlZqSkZlbEZZWkZoaVJscG9WbXBHYTJSR1RuTldiR1JvVFZWd1dWWlhjRTlpTWxaelkwVmFWMWRIYUZoVVZscExaVlpSZUZkdGRHaFdiVkpKV1ZWYWQxWXdNVmRqUm1oWVZteHdVMXBXV2t0ak1YQkhWVzFzVTAweWFGbFdNVnBUVWpGc1YxZFlhRlppUjJoeFZXMHhVMVpHVm5STlZGSllVbXhzTlZSV1VrTldhekZ5WTBWa1ZXSkhhSFpXYlhONFpGZEdSVlJzWkZObGExcEpWMWh3UjJFeVRYaFdiazVoVWxSV2NGbFVRbmRVYkZwellVaGtVMDFyVmpSVk1XaHZWbGRLYzFkc2FGcGlSMUV3Vm10YVUxWldSbkprUmxwVFlsWktXbGRzVm10TlIwWldUVmhPVkdKdVFsbFpWRVozWkd4c1ZWSnJjR3ROVjFKNlZWZDRZV0ZIUlhoalJURlhZV3RLYUZreU1WSmxSbkJKVm14V2FWWXlhRlZYVmxKTFRUQXhjMXBHWkZkaVdGSlVWRlprTkZkR1dYbE9WazVYWWxWd2Vsa3dXbUZXTWtwSFkwUk9XazF1YUdoWk1WcFBZMnh3UjFSdGJGZGhNMEpMVmpKNFYyRXlUWGhYV0doWVlteGFVMWxVVGxOWFJteHlXa1U1VGsxV1NsaFdNbmhMWWtaS2MxZHVjRnBXVm5CVVdWWmFTbVZ0UmtsWGJHUlhUVEZLV1ZkclVrZGhNVmw0V2toV1ZtRjZWbGhaV0hCWFYxWmFXRTFFUmxKTlYxSllXVEJXWVZadFJYZE9WbVJWVm14YU0xcFdXbE5qTVdSMVdrWmthR1ZyV2pSV1Z6RjNWREZrYzFkdVRtcFNNbWhoV2xkMGQxTXhjRmhOVlRsVFRXdGFTRmRyV2s5WFJrcFdZVE5zVjJGclduSmFSRVpPWlVaT2RWVnNaR2hOYldoV1YxWlNTMVV5VGtkV2JsSnNVMGRTY1ZWdGVIZGxSbFY1VFVSV1YxWXdjRWhaTUdoM1ZqRlplbFJVUmxkaVJsWTBXVEp6TVZadFJrZGFSazVwVmpKbmVWWnRNVFJoTVUxNVZHNVNWV0V5YUZGV2JURlRZMFpXY1ZOdE9WZFdiSEI2VmxkMGEyRnJNWEpPVm1oV1lsUldXRmRXV2twbFYwWkdUMVprYVZKcmNGbFdWRUpoWVRGa1JrNVdiR0ZTYXpWUFZtMDFRMWRHV2tkWGJUbFdUVlp3TUZWdE5VdGhiRXAwVld4YVYySnVRbGhXYTFwaFZteGtjMk5IZUZOaVZrbzJWakowYTAxR1dYZE5WV3hTWVROQ1dWbHJXbUZoUm14VlVteGFiRlpzY0RGV1Z6RTBWVEZhUjFkc2JGZGlWRVV3VlhwR1QxSXhXblZTYkZKb1pXMTRlRlpHV21GVE1ERlhWMnhvYkZKck5XOVZiRkpIVFVac1ZsZHVUbGhTYkhBd1ZsWm9hMWxXU2taalJXaFdZV3RhY2xwR1drdGpNVnAwWWtab1UyRXpRWHBXYWtaclRVWnNWMkpHWkZWaE1sSlpXVlJLYjJOc1ZuTlZiazVxVW14YU1GcFZhR3RVYkVwMVVXeGtWMDFxVm5KV01GcEtaREZhY1Zac1pGZGxhMW95Vm1wS05GbFdXWGxVYTJob1VteGFjRll3Wkc5aU1XUlZVbTFHVmsxc1NraFZNalZQVmxkS1dHVkdhRlZXZWtaMlZtMTRZV05XU25Sa1IzUk9WbFpaTVZacldtOWpNVnBYV2tWb2JGSnNjRmhVVldSdlVrWmFjbGR1VG1waVNFSkdWbGQ0YTFSc1duSmpSbWhYWWxSQmVGbFVSbHBsVms1eVdrZHNVMUpzY0c5V2JYaHJWVzFSZUZkdVRsZFhSMmhVVm0xMGQyVnNiSEpYYlhSV1RXeGFlbFl5ZUZkWFJscHpZMGRvVm1WcldreFpla1pUWkZaYWMxWnRiRk5OVlhCYVZteGtORll5VVhoVmJHUllZbXR3YUZWcldrdGlNVkpZWXpOb1QxWnNXakJhUldNMVZtc3hjbU5HYkdGV1ZuQlVWbXhhWVZkSFJrWlZiRnBvWVRGd2VWWnFRbXRVTVVwMFZXdG9hRkpVVmxoV2ExcFhUVEZhYzFremFFOVNNR3cxVld4b2IxWkhTa2hsUnpsV1lsaE5lRlp0ZUdGa1IxWklVbTFvVTJKclNsbFdha28wV1ZkS1IxZHNWbE5pUjFKb1ZXeGFkMVpHV2xWVGEzUlVWbXRhZUZaWGVHdFdNVXBZWkhwQ1YxWXpRa2hXTWpGU1pEQXhWbUpIYkZOaVNFSjNWMWQwWVdReFpGZFhibEpzVWpCYWNsUldXbUZUUmxwMFpVWmtWMUl3V1RKWmExcFhWbTFLV1ZSWWFGVldiSEJvV2tWa1YxTkdTbk5hUlRWcFVtMDVNMVl5ZUZkaU1rVjRWMWhvV0ZkSVFsTlpWRXB2VjBaU1dHTkZaRmhTYkhCNFZXMDFhMVpHV25OVGFrSldZbGhvVUZaVVJtRlNNV1J4Vld4a2FWSXhSWGRXYlRGNlpVWmtSMVp1VG1GU01uaFVXV3RhZDFaR1pGaE5TR2hXVFZkNFdGWXlOVk5VYkZweVRsWldWMkpVUlRCV2FrWnpWbXhhZEdSR2FGTmhNbmQ2VjFSQ1YyTXhaSE5YYkdSWVlrWktXRmxyV25kaFJscHhVbTFHVjFacmNIcFpNR1J6VmpGS1YyTkZNVmROYmxKVVZYcEdVbVZHVG5WVWJHUnBZWHBXV2xkWGRHdFZNVkY0Vld4b1RsWXpRbk5XYlhoM1RVWnJkMVpxUWxWTlZXd3pXV3RTVTFkdFJYaGpTRnBYWVRKU1IxcFdaRWRTTVZwelkwWmtVMVp1UWs1V2JYaFRVakZzV0ZSdVRtcFNWbHBYV1d0YVMxUXhXblJsU0dSUFVteHdWbFV5Tld0V2F6RlhVMjV3VjAxcVZsaFdWekZHWlZaV2MyRkdXbWxpYTBwRVZrWmFZV014WkVoV2ExcHFVak5TVDFsWWNGZFNNVnBZVFZSU1dsWnNiRE5VVldoclZrZEZlV1ZHYkZkaVdHaE1WVEJhVjJSRk1WZGFSbVJPWVhwV1NGZFhkR0ZUTWtaWFUxaG9WR0pGU2xoVmJURk9aVVpzZEUxV1pHcE5WMUphV1d0a01GVXlTbGRUYm1oWFVteHdXRmw2UVRGU01XUnpZVVU1VjJGNlZuZFdWekV3WkRBeFYxWnNhR3BsYkZwWVZtMTRkMlZzYTNkVmEzUlhWbXh3ZWxrd2FFdFdNa1p5VjI1S1lWSldWVEZXYWtaclkyczFWMVJzVG1sVFJVcGhWbTF3UjJFd01VZFhXR2hwVW0xb1ZWbFVTbE5XVmxsM1lVVk9hVTFXVmpOV2JUVnJWMnhhZEdWSWJGZE5hbFp5V1ZWYVMyUldSbk5pUjBaWFZtNUNUVmRYZEdGWGJWRjVWR3RhWVZKc2NFOVpWM1JoVFd4YWRHTkZaR2hOVld3MFZrYzFUMWRIU2toaFJtaGFZVEZhTTFWc1dtRlNNVnAwVW14U1RsWlhkekJXTW5SaFl6SkdSMU51VW1oU2JXaFhXV3RhWVUweFdYbGxSMFpyVWpGS1NGZHJaREJVYkZsNFUydHNXRlpGU2xoV2FrWmhVMFpPY2xkck9WZGlSWEJaVjFaa01GTXlWbk5WYkZaVFltMVNWRmxyV25kbGJGcElaVWQwYUZacmNEQmFTSEJMVjBaYWMxZHNVbGhXYkhCaFdrUkJlRmRXV25SaFJsSlRZbXRLWVZadE1IZGxSbFY0Vld0a1YxZEhVbGxaV0hCelkxWnNjbGR0Um14aVJsWTFXbFZrTUZack1VVlJhbFphVmxaV05GWnFTa3RUUmxaWldrWmthR0V4Y0V4WGJGWmhWakpPYzJORlpGVmlSMmhVVkZjeGIyUnNXbk5hU0dSU1RWZDRXVlpITlU5aFZrNUdUbFpvVjJFeFdtaFpNbmhUVmpGa2RGSnNhRmRpV0ZGNlZtcEtlazVXV1hoVFdHUnFVbGRTWVZsVVJrdFhSbVJYVjIxR1YwMVZOWGxaVlZwcllVVXhXVkZ0T1ZkaGEwcHlWV3BHUzJSR1duSmFSM0JUWWxaS1dWWkdXbGRrTVZKelYxaHNhMUp0VW1GV2FrWkhUa1phU0dSSE9WZE5hMVkwV1RCb1QxWnRTbGxVV0doWFVrVmFWRll3VlhoWFJUbFdUMWRzVTJKWVkzaFdNblJYWVRKUmVWTnJaRlJpYXpWd1ZXdGFZVmRHVm5STlZ6bHFZa2Q0VmxWdGREQmhhekZZVldwR1ZsWXphRmhXYWtaYVpWZEdSMVpzWkZkTk1taHZWakZhWVZkdFZraFVhMXBYWWtad2NGWXdaRzlrTVZwWVkwVmtWRTFYVWxoWGExcHJWakpLVldKR1dsVldNMUpvVmpCYVZtVkhSa2hrUmxaT1ZqRktTbFpzWkRSaE1WbDVVMnhzYUZKWWFHaFdhazV2VmpGd1YxcEdaRk5pVmtwSFZERmtjMVl4WkVaVGEyaFhZbGhTY2xSclpFcGxWa3B6V2taU1dGSXhTbEJXYlhSV1RWWmtWMWR1UmxWaE1EVlZWVzAxUTFKc1ZuUk5WRUpXVFd0Wk1sWnRlRzlYYkZwWVZXcE9WMVpGV21oVmJYaHJZekZXYzFwR1RtbFNia0Y1Vm14YWEyVnRWa2RYV0doaFVtMTRiMVZxUW1GV1ZsWnpWV3hrVjJKSFVsbGFWVnBoVkd4YWNtSkVVbHBOUm5Cb1dWVmFTMlJHVm5OaFJscG9ZVEJ2ZWxacVNqUmpNVnB6WTBWYVlWSnRVazlaVkVaM1RsWmFjVk5xUW1sTlYzaFlWVEZvZDJGR1NsVmlSMmhYWWtad00xWkZXbmRTTVdSMFpFZHdUbFpzYjNkWFZsWldUVlpWZUZOdVRtcFNNbWhZV1d4U1JtUXhiRmhqTTJoWFRXdHdTRmRyWkhOVk1rcFhVMnhhVjJGclNuSlpha1pyVWpKS1IyRkhlRk5OUm5CWlZtMHhOR1F5Vm5OWFdHeHJVak5TVmxsWWNFZFhWbHBZVGxjNVYySlZjRlpXYlhRMFYyMUZlR05IYUZkaVIxSk1WV3BLVDFJeGNFZGFSM2hvVFZkM01sWnRNVFJWTVVaMFZtdG9WbUpIYUZSWlZFWmhWMVpzY2xwR1RsVk5WM2d3VkZaak5WWnNXblJWYkd4YVRVWlpkMVpzWkV0V01XUnlZa1phVG1Kc1NubFhWbHBoVTIxV1dGWnJaRlppUmxwWVZXeG9RMDFzWkhOV2JVWm9UVlpzTkZkcmFGTlZSbGw1WVVVNVdtRXhXak5XTVZwaFpFVXhWVkZzY0ZkaVIzY3hWbGN3TVZReFdraFNhbHBwVW0xb1lWWnFUbE5UUmxKeVYyeE9hazFYVW5wV1IzaHJWR3hrUmxOcmNGZFNSVnB5V1hwR1ZtVldUbk5hUmxKb1RXMW9XVlpYY0U5aU1sSnpXa1prV0dKVlduRlVWbFV4VjJ4c2NscEVVbGRTYTNCWVdUQmtiMWRIU2toVldHUldaV3RHTkZsNlNrOVNNWEJIWVVkc1YxWnVRalJXYlRCNFRrWnNWazFWWkZkaWJFcHpWV3BPVTFac2JISldibVJUVFZac05GbFZZelZXTURGWVZXdHdWbFl6VW5aV2JURkhZMjFPUjFWc2NHeGhNWEJWVjJ0YVlWUXlUWGhYYmxKcFVtczFUMWxzWkc5WGJGcHhVbTEwVDFJd1ZqVlZNV2h6VmxkS2NrNVdhRnBpV0ZKb1ZsUkdjMk5zY0VkVWJGcFRZa2hCZDFkVVRuZFNNVmwzVFZaa2FsSnRhR0ZXYkdSU1pERlplV1ZIUmxkV2EzQXhXV3RhZDFSc1NuVlJhbHBYWWxSQ05GVjZSbUZXTVdSMVZtMXdVMkpyU2xsV1JsSkNUVVV4UjFwSVNsZGlXRkpVVkZaVk1WSXhVWGhYYlhSb1lrVnNOVmxWVlRWV2JVVjRWMnQwVlZaV2NHRmFWVnByWXpGU2MxVnJOVmRpUm10M1ZtcEtNRll4YkZkVmJrNVlZbXhLYzFWcVNtOVdNV3hZWTNwR1UxSnRkekpWYlRGSFlXeGFjazVVUWxWTlYxRXdWbFJLUzFZeFRuTmpSbWhYVWxWd1dWWkdWbUZaVjA1eVRWWnNWR0pZUWxSV2FrWkxWakZhZEUxSWFHbE5WWEJJV1d0YVlWWXhaRWhoUmxaWFlsaG9hRnBXV21Ga1IxWklaRVprVG1FelFsbFdWekYzV1Zaa1NGTnJhRlpXUlVwaFdsZDBZVmxXY0ZkWGEzUnFZa2hDU0ZadE1YTldNREI1WVVaR1YySkhVak5XUkVwS1pVWlNkVlJzYUdoTlZuQlZWMWQ0VTJNeVNYaFZiR1JoVWtaS1dWVnRlSE5PVm10M1drVmtWMDFyY0ZkWk1HaDNWMnN4UjJOSWNGZE5ha1pIV2xaYVYyTnJPVmhTYkdSWFltdEpNbFp0Y0VOaE1WVjRVMnhrVjJKck5WWlphMVV4WWpGd1dHVkdjRTVTYkhBd1drVmtNRlJzU1hoU2FsWldZbGhTY2xZd1dtdFRWa1p6V2tad2FWZEhhRzlXYWtKaFZURlplRnBJVm1GU00xSndWVzAxUTFOc1pITldiVGxhVmpCd1NGWXlOVXRVTVdSSlVXMUdWMkpHY0ROV1ZWcHpWakZ3Um1SR2FGZE5SbkJMVjFaV1lXSXlSbGRUV0doVFlXczFXVlpyVm5kT2JIQldXa1UxYkZKck5YcFphMlJ6VlRBeFIyTkdXbGRXTTJoMlZWUkdZV014Y0VkYVJscG9UVWhDVUZadE1IaFZNV1JIVjJ4b2JGSXpVbUZXYlhSMlRXeHNjbGw2VmxoaVZYQklWakp3VDFsV1duTmpSbEpYWVd0YVdGbDZSbmRTTVhCSFdrZG9UbUZ0WnpGV2JUQjNaREF4VjFSWWFHbFNiVkpaV1cxNFMxWXhiRlZUYlRsWVVteEtXRll5Tld0WFJrcDFVV3RrV0dFeGNISldWRXBMVmpGa2NtRkdXazVpYXpFMFZtMTBZVk14V25SVGExWllZa2RTYjFsVVJuZGxWbHBJWkVkMFZHSldXa2hWTW5oellWWktjMk5JUWxwaE1Wb3pWbXBHYTFkRk1WVlZiSEJYWWtkM01GWnFTVEZTTVZwSVUydGFUMWRGV2xkWmJHaHZUVEZ3Vmxkc1pGaFNWRVpYVjJ0YVYxUnNXblZSV0dSWVlUSm9NMVY2Um1GamF6RlpVbXhLVjFKV2NHaFdiWGhoWkRGTmVHTkZWbFJoZW14VVdXeFdZVk5XVm5SbFIzUlhUVVJHTUZsVlduZFdNa1p5VjIxb1dGWnRVa2RhVlZwVFkyMUdSMVJ0YUU1aWJXaFlWakZrTUdFeVNYaGFSbVJYWW10YVZsbHNVbk5VTVd4eVdrWk9iRlpzY0RCVVZsWnJZVWRHTmxKc2JGZFdNMmgyVm1wR1MwNXNXbk5oUm5CWFRUSm9URmRzV210U01VbDRWbTVPVjJKSFVsaFpiWFJIVG14YWNsa3phRTlTYlhoWVZUSTFUMkZGTUhwUmJUbFdZa1pLZWxacldsTldNVnAxV2tVNWFWSXhTbHBYYTFaclVqSkdWazFXWkdwU1JVcFhWRmR3VjFkR1dsaE5WV1JQWWtWd2VsZHJXbXRoUlRGWFkwVXhXR0pIVVRCYVJFWmFaVVp3U1Zac1VtbFhSMmhaVm0xMFYxbFdaRmRYV0d4clVqTlNUMVZ0ZUV0TlJsWjBZMGRHVjAxcldubFViRnB6VmpKS1dXRkhhRnBOYm1oVVZtMTRhMlJIVWtoalJUVllVbFZ3U1ZacVNqQlpWbFY1VW14a1dHRXlhSE5WYlRGVFYwWnNjMkZGVGxWU2JFcDVWMnRhYTFZd01YSldhbHBhWVRKUmQxWnJXa3RXVmxwMVlVWmtWMDB3U2tWV2JYQkNUVmROZUZkdVRtaFNNMUpWVldwR1MyUnNXbGhOVkZKcVRVUldlbFl5ZUc5aGF6QjVZVVpvV21FeGNETlZha1phWlZVMVdGSnNaR2xTYmtKSVYxUkNZV0l4V1hkTlZXUnFVbGhvWVZwWGRIZFRSbFowWTNwV1YwMVlRa2hXUjNoclYwWktWbU5HUmxkaVZFVXdWMVphVm1WR1NsbGlSbHBZVWpOb1ZWZFhkR3RWTVZwelYxaGtZVkpHU25GWmExcExWbXhWZVdWRk9XaFNhM0I2VlRKNGIxWXlTbFZXYmtwWFRVWndhRmw2Ums5a1YwNUhZVWRvVG1KWGFEVldNVnBYV1Zac1YxZHNaRlJpYkZweFZXMTRkMVF4YkZobFIwWldWbXh3TUZwRlpFZFhiRnB6WWtSV1YxSXpVbkpXVnpGTFVqRmtjMkZHY0doTmJXaEZWa2Q0WVdFeVRYaGFTRkpUWWtad1QxbHJWbmRUYkZwMFRWUkNhVTFyV25wVk1uaFhWakpHTm1KR1pGcFdSVnBvV1ZWYVUxZEhWa2hTYlhCWFlURndObFl5ZEd0aU1rWklWbTVLV0dKSGVGbFdhazVUWkd4V05sTnJXbXhTYkVwNVZqSnpOVll4V2tobFJtaFlWbTFSZDFwRVJtRlNNV1IxVTJ4b2FXRjZWbmhXUmxwdlVURktjMWRzYUU1V1JrcHZWbTEwYzA1R1ZYbGpSMFpYVFd0V05WWldhR3RXTVVwR1YyMUdZVlpXY0ZCYVJscFhaRWRXUjFSdGJHaE5TRUpoVm0xMFlXRXlVWGhUYmtwT1ZsZFNhRlZ0TVZOWFZteFZVbTVrYW1KR1NsaFdiRkpIWWtaYWMyTkZiR0ZXVjJoeVZteGtSMDVzU25GU2JIQlhWbXh3VlZacVFtRlpWMDE1Vkd0a2FGSXdXbGhhVjNSaFYxWmFkR05GWkdoTmJFcFlWakkxVDFsV1NYbGxSbFpXWWtaYU0xUnRlR0ZrUlRGWldrWldUbFpzV1RCV2JHUTBZVEZrUjFwRmFHeFRSVFZYV1Zkek1WWkdXbFpYYkdScVZtdGFWbFZ0ZUZOVk1rcFpWVmh3V0Zac1dsaFdSRVpoWkVaT2MxZHNhR2xpV0doWVZrWmtkMVl4VmtkWGJrWlNWMGRvVkZSV1pGTmxWbkJXVjI1a2FWSXdWalJaTUZwelZqRlplbEZyYUZkaGExcHlWbXBLVDFKdFJraGhSazVwVm10d00xWnRjRU5oTWtsNFlrWmtXRmRIZUhOVmJURlRZMFpTVjFkclpFOVNiSEJKVkd4YVQxWnJNWEpqU0hCV1RXNW9TRlpxU2t0VFIwWkpWMnhrVjFKV2NGVldiWEJIWkRGS2NrOVdXazlXVkZaWVZGWldkazFHV25OWk0yaE9VbXhHTkZZeGFHOVdSMHB5WTBac1dsWXpVa3hYVmxwVFZteHdSMVJ0ZUdsU2JrSktWa1phVjJFeVJuUlRhMmhXWWtoQ1lWUlZXbmRrYkZweFUydDBWRlpyV2pGWmExcHJWVEF3ZUZOdWJGZFhTRUpJVlhwS1UxSXhXblZUYkdocFZqSm9WVmRYZUd0aU1sRjRXa1prVm1Fd05YSlVWM2hIVGtaWmVXVkhPV2hpUlhCWlZsZDRiMVpXV1hwaFIyaGhWak5vYUZVd1ZURldNWEJJWVVkc1UxZEZTa3BXYkZKTFRrWnNWMWRZYkZOaWEzQlpXVlJPYjFkR1VsaE9WemxvVW14V00xWnNVa2RXTURGWFUyNXdXbFpYVW5wV1ZFRjRWbTFPUm1SR1pFNWliV2haVm14U1IyTXhXWGhqUld4VllrZG9jRlZxUmt0V1ZscHhVVzEwVmsxWGVGaFphMmhQWVVaS2NtTkZPVlppV0dob1dsWmFXbVZWTlZoa1JtUlRZVEozTUZacVNqQmpNV3hYVjJ4a2FsSnJTbGhWYWs1dllVWndSMWRyWkdwV2JGcDZWMnRhYTFVeFdYcFZWRUpYVFZkb00xVjZSbEpsVmxKWllVWmFhVkl6YUc5V1Z6RTBXVmRPUjFadVJsUmlWR3hYVlcxNGQxWnNWbGhOVkVKVlRWVndlVlJXVWxOV01rcFZWbXQ0VjJKVVJrZGFSRUV4VjFaR2MyTkhhRTVpUlZZelZqSjRhMDVIUlhsVWJrNVlZbXhLY2xWcVNqUldSbXh5V2tST2JHSkdjRWhXTW5oUFZqQXhXRlZ1Y0ZkTmJtaDJWbTB4UzJNeVRraFNiR1JwVjBkbmVsWlVRbUZWTWxKSVZtdG9VMkpZVWxoWldIQldaREZhV0UxVVVsVk5hMXBZVmpKNFYxWnNaRWhWYkdoVlZucFdWRlpyV2xkT2JFcHpVMjEwVGxKR1dsbFhWbFpoVkRKR1JrMVlWbWhTYldoWlZtMTRTMVZHYkhGU2JIQnNVbTFTTVZadE1YZFdSa3BWVm14a1YxWjZRalJXVkVwWFZqRmtjMkZIZEZOU1ZYQjJWMVpvZDFJeFNuTldibEpyVTBVMVdGbHNWbmRYYkZwWVpVWk9WMDFXYnpKVmJYUTBWMjFXY21OR1FsWk5WbkJNV1hwR2EyUkhSa2hoUlRWWVVsVnZlVlp0TVRCWlZteFhZa1prVm1Kc1NsZFdNR1J2WTFaV2MxcEdUbWhTYkZwNFZrZDRUMWRHU25SbFNIQmFWbGRTTTFscldrdGtSbFoxWWtaa1YwMHhSak5YVm1SNlpVZE9jMWR1UmxkaVIxSndWakJrYjJJeFpGZFhiVVpWVFZVMVNGWnROVTlXTWtwSVZXNUNWbUZyV2t4V2JGcGhWbFpHZEZKdGRFNVdNVXBLVm14a01HTXhXbGhUYTJSVVlrWktXRmxVUm1GaFJtUlhWMjEwVjFacldqQlZiWGhMVkd4WmVtRkdhRmRTYkhCMlZXcEtSMVl4VG5OaVIyaFRZbFpLV1ZkV1VrZFpWMFpIWVROb1dHSnRVbGhaYTJoRFUwWmtjbHBJWkdoV2JIQjZXVEJXTUZZeVNsVlJhbEpXWVd0YWFGVnFSazlYVjA1SVlVWlNVMkpyU2xwV01WcHJUVVpOZVZKclpGZGhiSEJWV1Zod1YyTXhWblJsUlhSWVlrZFNlVll5ZUd0aFJrcFZVV3BTVmsxcVZuWldha1phWld4R2NsVnRSbE5TVm5CNVYxaHdSMWxYVFhsU2ExcFFWbTFTVDFWdE5VTk5iRmw0V2tSU1YwMXNSalZXYlRWUFZqSktjMU5yT1ZaaE1WcG9WakZhYzJNeFduVmFSbEpYWWtoQ1dsZHJWbXBPVm1SelYyNU9hbEpGU2xoV2FrNU9UVlprVjFkdFJtdFNiRnA1V1ZWYVlWUnNTWGhUYTJ4WFZrVktjbFY2UmtwbFJsWjFWVzFzVTAxdWFGbFdSbVEwVW0xUmVGZHVVazVYUjFKVlZGVlNWMU5XVlhoaFNFNVhVbTFTU1ZwVldsZFhiRnBHWTBaU1drMUdjRmhaTW5oclpFWktkR0pGTlZkaVJtdzJWbTF3UzAxRk1VZGFTRTVZWW1zMWNGVnJWVEZYUm14elZXeGthbUpHY0VaVk1uUXdWa1pKZUZkcmFGaGhNWEIyV1ZWVmVGWXlUa2xpUm1oWFlsWkpNbGRzVm1GVU1XUkhVMjVLVjJKRmNIQldiRnAzVjFaYWRHTkZkR2xOYTJ3MFZqSTFSMVpIUm5OVGJHeGFZa1p3YUZVd1dtRlRSVFZXV2tab1UwMUlRa2xXVkVwNlRsWmFkRk5yWkZSaVIyaFlWV3hhZDJOc1duTlhhemxZVmpCYVNGWnRjekZoVmtwWlVXdHdWMkpZUWt0VVZscGFaVWRLUjFwR1VsaFRSVXBVVjFkNFUyTXhaRWRpUm1oclUwZFNjbFp0TlVOU2JGWjBUVlZrVmsxRVJscFZWM1IzVmpGS05sSnFUbHBXYkhCb1ZteGFZV05XV25OaFJtUk9UVlZ2ZVZac1dsTlRNVWw0VTI1S1RsWlhlR2hWYlhoTFlqRlNWVkpyZEdoU2JIQXdWRlZvYjFadFNsZFNhbEpYVFc1U2FGWXdaRVpsUjA1SlZHeGFhVlpHV2tWV1ZFWmhWakpTUmsxV2JHRlNiSEJQVld0V1lWTXhXbGRhUkVKclRWWnNOVlV5ZUhOaFJrNUdZMGRHVjJFeFdtaFdNRnBoWTFaS2RGSnNhRmRpYTBwSlZteGplR0l5UmtaTlNHUlVZbFJzV0ZsVVJuZFhSbXhWVW14YWJGSnVRa2RYYTJSM1ZURlplRk5zYkZoV2JWRjNWWHBHWVZZeFduVlZiWGhVVWpGS1VGWnRNVFJrTURGSFkwWmFhRkl6VW05V2JYUjNUVVphV0dSSVRsZE5WbTh5Vm0wMVMxWXdNVWRqUjJoV1lsUkdURlZzV2xkak1XUnlUbGRvYUUxWVFrdFdiVEIzWkRKV1IxWllhRlJYUjJoWVdXMTBkMVZXV25STlZ6bFhVbXhLVmxVeU1EVmhNa3BIWTBSQ1ZWWnRhSEpXVjNONFYwZFdSMkpHWkZObGJGcFJWbTE0WVdFeFRrZFdiazVZWWtoQ2NGWXdXa3BsYkZwMFpVZEdWazFXY0hwV01uaFhWVEpLU0dGSVFsWmhhelYyVkd0YVlWWldUbGxoUlRWVFlraENObFpxU1RGVU1WbDVVbTVLVDFadFVsWldiWGgzVkVaYVJsZHNjR3hXVkVaWFZqSXhORll5U2tkaU0yaFlWa1ZLYUZwRVJscGxWazV5V2tkb1RrMXNTbHBYVmxKSFdWZEdSMWRzVmxSaVJUVllWRlpvUTFOc1dsaE5XRTVXVFd0d1dWbFZXbGRXTWtwWllVaEdWV0V5VWxoVmFrWnJaRlpLYzFWdGFHbFNXRUl6Vm10YVlWbFdTWGRPVm1SWVlteEtVRlpzYUZOaU1WSlhWbTVrV0ZadGVGZFdNalZQVjBkS1ZtTkdjRmRXTTFFd1ZqSnplRkl5VGtkaFJuQk9WbTVDVFZkWWNFZGtNVTVJVld0YVQxWnRVbGhaYTJRd1RrWmFkR05GZEU1U01HdzBWbFpvYjFadFNuSmpSVGxYVFVaYU0xWXhXbk5qYlVaR1ZHeG9VMkpJUVhoWFZFSlhVekZTYzFkdVRsZGhiRnBvVm14YVdtUXhXa1ZUYTNSWFlsVTFSMVl5ZUd0Vk1EQjVZVVJLV0Zac2NHaFZNakZTWkRBeFYxWnNWbWxTTW1oWlZrWlNRMU14VGxkYVNFcFdZVEpTYjFSV1ZuZGxWbEp6VjIxMGFGSnJiRFpWVjNoVFZqSkZlRmR0YUZkaE1YQm9WV3BHWVdSSFRrWlBWbVJYVW14dk1sWnRNVFJpTWtsNFlrWmtWV0V4Y0ZCV01GWmhXVlpzVlZOck5VNVdiRXA1VmpJMVQyRnRTa2hWYWtaWFVqTm9jbFpxU2t0VFIxSTJVbXhrYVZJd01UUldhMUpIWVRKU1IxUnVTbWhTTW1oVlZXeGFkMVl4V25SalJUbHBUVlZzTkZrd1dtdFhSMHAwVld4V1YySllUWGhhVjNoaFYwVXhXVlJzWkU1aE0wSktWa1JHVTFReFdYZE5XRlpXWWtaS1dGVnJWbUZaVm5CWFYydDBXRlp1UWtkVWJGcFRWVEF4Vm1ORVVsZGlSa3BFV1ZSR1ZtVldTbkphUm1ScFlYcFdiMVpYTVhwTlZtUkhWV3hrWVZKR1NuTlZiWGhoVjFaU2MxWlVWbWhTVkVaWFdXdFNUMWRyTVVkWGFrNVhZV3RhYUZSdGVFdGpWbEp6V2taa1UxZEZTbHBXTW5SWFlURlZkMDVZVGxSaWF6VnZWV3BLYjFReFduUk9WVTVXWWtad2VsWXllRTlWYlVZMlVteHNWMVl6VW5KV2JHUkxZMjFPU0U5V1dtaGhNamgzVm0xMFlWVXhaRVpPVm1oUVZtNUNXRmxyYUVOWGJGcElaVWM1YUUxV2JETlVWbWhMVkd4YVIxTnRSbFZXVm5BeldWVmFhMVl4WkhKa1IzUlRZa1p2ZDFaRVJtRmtNVmw0VTJ4V1YySkdXbGhXYTFaMlRVWnJlVTFXU214V2EzQjVWako0UTFZd01YUmhSbFpZVmpOU2NsUlVTbGRqTVhCSFlVZDBVMkY2VmxWV1JscHJWVEZPVjFadVRtaFRSVFZZV1d4V2QxTldiRlphUldSWFRXdHdNVlZYZEc5V2JWWnlWMnBPVjJGcldtaFdNV1JIVWpKR1IxcEhiR2hOU0VKTVZtcEdVMUV5UlhsVVdHaFlWMGQ0VlZsVVNtOVZWbFYzV2tSU1dGSnNTbGhXTW5Rd1ZteEtkR1I2U2xaTmJsRjNXVlJHUzJOdFRrbGpSbVJPWVd0WmVsWnJaSHBrTWxGNFZHNU9ZVkp0YUZoWmJGcEhUVEZhV1dORmRGVk5WbXcxVlRKMGExbFdTWGRYYkZKaFZqTm9hRlpWV210WFIxSkhWMjE0VTFaR1drbFdha293WWpGUmVGcEZhRlppVkd4WFdXeG9iMDB4V1hsbFIwWllVakZhU0ZkcldtOWhWa3AxVVd0b1dGWkZTblphUkVaYVpVWk9jMXBIY0ZOaVYyaFpWa1pXWVZack1WZFhibEpPVm1zMVZGUlhkR0ZUUm1SeVZsUkdWV0pGY0ZwVlZ6VmhWakpLV1ZWdGFGZGhhMXBoV2xaYVUxZFhSa2RWYld4VFltdEtVVlp0TVRSaE1rbDVVbXRrVjJKc1NsQldiRlV4WTFaV2RHVklaR3hpUm13MVZHeGtSMVpYU2xaalJXaGFZVEZLV0ZkV1dtRldNazVIVVd4a1RsSXhTa2xXUnpFMFV6Sk9jMk5GYUZOaVIxSllWRmN4YjFac1duUk5WRUphVm0xNFdGVXlOVk5XVjBWNVZXeE9XbUV4Y0ROWmFrWnpWbFpLZFZwSGJFNVdia0pKVm1wSmVGSXlSa1pOVm1ScVVtMW9XRlZxVG05WFJscHhVMnQwV0ZJd1drZFVNVnByVkd4S2MyTkZNVmRpVkVVd1dWUkdXbVZHWkhWVmJYQlRUVEpvVlZaR1ZtRmtNVTVYVjI1R1UySlViSEpVVjNSaFUwWmFTR1JIUmxWTlZuQjZWako0WVZZeVNsbGhSbWhWVmtWYU0xWnRlR3RrVmxKeldrWmthRTB3UmpSV2Frb3dXVmRKZUZaWWJGUmhNWEJ3VkZSS2IxZEdiRmhrU0U1UFVteGFlRlZ0ZUdGaE1ERkZVbXhvV0dFeGNIWlpWV1JHWld4R2MyRkdhR2xTTVVZelZqRmFZVlF4U1hsVWExcG9Vak5vVkZaclpEUmxWbHBZVFZSU1dsWnRVbnBaYTJoTFdWWk9SazVXWkZWV2JGb3pWbXBHY21ReVJraFNiR1JPVm01Q05sWlVTakJWTVZwMFZtNUtVMkZzU21GYVYzUjNVakZ3V0dWSVpGUlNhM0I2VmtjeGMxWXlSWHBSVkVaWFlsUkNORlJyWkVwbFJscFpZVVpXYVZJeFNscFhWekUwVXpGV1IxZHVVazVXYXpWWlZtMHhOR1ZzV1hsTlZXUllVakJ3U1ZaWE5YTlhiRnBYVjJ4Q1YwMXVhR2haTW5NeFZtMUtTRkpzWkZkaVIzZDZWbTF3UzJWdFZrZFRXR2hoVTBaYWNWVnRlSGRVTVZaMFRsVk9WVlp0VW5sV01qRXdWbFV4Vm1ORVFsZFNNMUp5Vm14a1IwNXNXbk5WYkZaWFVsWndTRmRzVm1GWlYxSklWV3RrVldKR1NrOVpWRVphVFZaYWMxbDZSbFZOVm5CWlZUSTFTMkZzU25OalIwWmFWa1Z3VkZwSGVHRmpNV1IwVW0xd2FWSnVRWGhXTW5SaFZqSkdWMU5ZY0dGTk1sSllWVzE0ZDJGR1drVlNiRXBzVW0xU01WWlhNVFJWTWtwWVlVZG9WMkpZYUdoYVJFWlhVakpLUjFwR2FHaE5NVXBhVm0weE5GbFhWbGRYYmxKc1VqQmFWbGxzVm1GbGJGbDVaRVprV0ZKc2NIcFpNR1J2VjJ4YVJsZHJlRnBsYTFwVVdrWmFTMk14Vm5SaVJsSlRWbGhDVWxacVJtRmhNRFZIWWtaa1dHRXlVbGxXTUdRMFkxWldjMXBHVG1wV2JFcFpXbFZXTUZaR1NuTldhbFpWWWtad2NsbFZaRXRTYlVwRlZHeGtUbUp0YURKV2JUQjRVekZhVjFOc2JHRlNiRnBZVld4YWQyRkdaSEpWYTJSYVZqRktTVlpIZEdGVU1WcDBWV3M1VmsxR1dreFZla1poWkVVeFNXRkZOVk5OUjNjd1ZtcEdiMk14V2toVGEyaHNVbXMxWVZZd2FFTlRSbHB4VW01T1dGSXhTa2RhUlZVeFZHeFplbUZFVWxkV2VrRjRWa1JHVW1WV1RuSlhhemxZVTBWS1dWWkdZekZVYlZaSFlrWmFZVkp0VW5GVVZtUlRaVlpaZVdWSGRGWk5SRUkxV1ZWb2MxZEdaRWxSYTJoWFZucEdXRlpxUms5a1ZscHpWbTFzVTJFelFqTldNVnBUVkRGRmVGcElUbUZTYldoeVZXcE9VMVl4VWxkWGJVWlVVbTEwTTFadE1EVmhWa3B5VGxWc1YxWXphRmhXYlRGTFYxZEdSVlJzWkU1V2JrSlVWMnhXWVdFeVVsZFZiazVZWWxkb2MxbFVSblpOVmxweVdrUlNhVTFyVmpSV01qVkxWR3hPU1ZGc1RscFdSVFYyVm1wR1UxZEZOVlpQVlRsVFlsaFJNVmRVVG5kU01WbDVVMnRrV0dGclNtRlVWVnBXWlVac1YxZHRkRlJTTUZwSldWVmFhMkZXU25WUmJGWlhWMGhDU0ZaWE1WZFdNVnB6WWtkb1UySkdjRnBXVjNCTFlqRlplRnBHWkZaaGVteFRWRmR6TVZkR1duUk9WVGxYVFZad1IxWXlOVXRXTWtwVlVsUkNZVlpzY0hwV2JYaDNVbFpHZEdGR1RrNVRSVXBaVmpGU1ExbFhUWGhpUm1SWVlrZFNWVmxVU205WFZscDBaVWhrVlZKc2NEQlpNM0JIVjBaYWMyTkljRnBOUm5CeVdWWmFUMUpzVG5GV2JHUm9UV3hGZDFkV1VrZFZiVlpIVlc1S1lWSnRVbkJaVkU1RFpVWmFXRTFZY0U1V2JWSklXV3RvUzFkdFZuTlhiRUpXWWxob00xcFZXbGRrUjFaR1QxWmtVMDFHYTNsV2JURTBZekZhZEZOcmFHaFRSbkJoVm1wT2IxUkdiRFpTYXpscVRWWktlbGt3Wkc5VWJHUkdVMnMxVjAxV1NreFVhMXB6VjBaU2MxcEdUbWxTYkhCVlYxZDRiMUV4WkVkaVNFNVlZVE5TVUZsclpGTlhSbHAwWlVkR1ZVMVdiRE5aTUZaelZtMUtTR0ZJY0ZwaE1YQk1Xa1ZrUjFOSFJrZGFSMnhUVFZWdmVWWnRjRU5aVm1SMFZWaG9hbEpYVW1oVmJURnZWMFpzVlZKdVdtdE5WMUo1Vm0weFIxWnJNVmRpUkZKWFRXcFdVRmxYZUV0T2JVcEhZa1prYUUxV2NFMVhWRW8wVmpBMWMxTnVTbEJXYXpWUFZtcEdTMDVzWkZkV2JYUlRUVlpXTlZVeWRITlZiVXBHVTJ4c1YySllhRXhWTUZwelRteEdWVkpzWkU1V01VcGhWMWQwYTA1R1ZYZE5TR2hVWWtkb1dWWnFUbE5qVmxKelZsUkdVMDFXY0RGV1Z6RTBWa1pLVlZac2JGZGlWRVV3V1hwQk1WWXhaSE5oUjNSVFVsVndXbGRYZEdGa01ERkhZa1phV0dKRk5WbFpiRnBoWlZaWmVVNVlaRnBXYTNCWVZtMXdVMVl5U2xsVVdHaFhUVWRTVUZWcVJsTmpNWEJIV2taT2FWSnRkekpXYlRCM1pESlJlVlZZWkU1V2JWSlhWakJrTkZaR2JIUmtTR1JWVFZac00xWnNVa2RYUmtwelkwaHNWMkpVVm5KV2JYTjRWakZPYzJKR1ZsZGlTRUpSVjFkMGExTXhUbGRTYms1cFVteGFXRmxyYUVObFZscHhVVzFHV2xZd01UUldSelZQWVd4S2RGVnVRbGRoTVZwb1ZURmFZV05XUm5SU2JGSnBWbXh3V2xaWE1UQldNVnBZVTJ0b2FGSjZiRlpXYlhoM1RURmFWMWR0ZEZoU1ZFWktXVlZhVDFSc1duUmtla0pZVmtWS1dGWnFSbHBsVms1ellrWkthVkpyY0ZkV2JURTBXVlV3ZUZkcldsaGlWVnBaVldwR1lWTldWblJsUnpsb1VqRmFlVll5ZEhOWFJsbDZWVzFvV2xaRmNFaFZha1pQWkZaT2NrOVdhRk5XYmtKWlZqRmFhMDFHVFhkTlNHaFdZa1p3V1Zsc2FGTlhSbHAwWTNwR1RsSnVRa2RXTWpFd1lVWmFjbU5HV2xkaVdGSjJWakJhWVZKc1RuTlZiRnBzWVRGd2VWWlVRbUZUTWxKWFZHNUtVRlp0VWxsVmFrcHZZakZhZEUxVVVtaE5WbFkwVmxkMGExZEhTbkpqUm14YVZrVTFWRll4V2xkalZrWjFXa1pPVGxkRlNsaFdha2w0VWpGWmQwMVlUbGhoYTBwWlZqQm9RMU5HV25Sak0yaHFWbXh3TVZrd1duZFViVVp5VjJ4R1YxWXpVbWhaTWpGWFl6RktkVk50ZUZOaVNFSlpWbGQwVjFKck1WZFdXR3hQVjBVMWNWbHNWVEZTVm1SVlZHdE9WVkpzV2xaVVZWSnpVekpXV0dSSVpFdGxWM1IzU25scmNDY3BLUT09Jykp'))'))
